#include "totvs.ch"

#include "execin.th"
EXECIN CLASS SPJImport

static function SPJImportData(oMsNewProcess as object,lEnd as logical) as logical

    local aAddIndex as array

    local cAlias:="SPJ" as character
    local cIndexKey as character
    local cTableImport:="SPJ" as character

    local cTmpAlias as character

    local cPreLoadAlias as character
    local cPreLoadTableImport as character
    local cPreLoadIndexKey as character
    local aPreLoadAddIndex as array

    local lSPJImport as logical
    local lPreLoadTable as logical

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oTLogReport:=tLogReport():New() as object
    local oFWTemporaryTable as object

    cPreLoadAlias:=allTrim(oTFIni:GetPropertyValue(cAlias,"preLoadAlias",""))
    cPreLoadTableImport:=allTrim(oTFIni:GetPropertyValue(cAlias,"preLoadTableImport",""))
    cPreLoadIndexKey:=allTrim(oTFIni:GetPropertyValue(cAlias,"preLoadIndexKey",""))
    aPreLoadAddIndex:=strToKArr2(allTrim(oTFIni:GetPropertyValue(cAlias,"preLoadAddIndex","")),",")

    lPreLoadTable:=(!empty(cPreLoadAlias))
    lPreLoadTable:=((lPreLoadTable).and.(!empty(cPreLoadTableImport)))
    lPreLoadTable:=((lPreLoadTable).and.(!empty(cPreLoadIndexKey)))
    lPreLoadTable:=((lPreLoadTable).and.(!empty(aPreLoadAddIndex)))

    if (lPreLoadTable)
        lPreLoadTable:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,@oTLogReport,@cPreLoadAlias,@cPreLoadIndexKey,@cPreLoadTableImport,@aPreLoadAddIndex,@lPreLoadTable)
    endif

    cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","PJ_FILIAL+PJ_TURNO+PJ_SEMANA+PJ_DIA"))
    aAddIndex:=strToKArr2(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","PJ_FILIAL,PJ_TURNO,PJ_SEMANA,PJ_DIA")),",")

    lSPJImport:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)

    if (lPreLoadTable)
        cTmpAlias:=cacheData():Get("datasul2totvsprotheus","import"+cPreLoadTableImport+"Alias")
        if (select(cTmpAlias)>0)
            (cTmpAlias)->(dbCloseArea())
        endif
        oFWTemporaryTable:=cacheData():Get("datasul2totvsprotheus","import"+cPreLoadTableImport+"FWTemporaryTable")
        if (valType(oFWTemporaryTable)=="O")
            oFWTemporaryTable:Delete()
            oFWTemporaryTable:=FreeObj(oFWTemporaryTable)
        endif
    endif

    if (lSPJImport)
        ApMsgInfo(cAlias+" Table Import Completed","Info")
    else
        ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
    endif

    oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
    MsAguarde({||oTLogReport:Clean()},"Releasing temporary files and workspace memory...","Wait...")
    oTLogReport:=FreeObj(oTLogReport)

    FWFreeArray(@aAddIndex)

    DelClassIntF()

return(lSPJImport)

static function SPJGetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SPJSetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SPJORNTRAB(xGet as variant) as variant

    local cKey as character

    local cPJ_TPDIA as character
    local cPJ_XJNTRAB as character

    local cAliasSPJORNTRAB as character

    local xRet as variant

    begin sequence
        
        cAliasSPJORNTRAB:=SPJGetValue("importSPJORNTRABAlias")
        if ((Empty(cAliasSPJORNTRAB)).or.(Select(cAliasSPJORNTRAB)==0))
            break
        endif
        
        cPJ_XJNTRAB:=SPJGetValue("PJ_XJNTRAB")
        if ((valType(cPJ_XJNTRAB)!="C").or.(empty(cPJ_XJNTRAB)))
            break
        endif
        
        cPJ_TPDIA:=SPJGetValue("PJ_TPDIA")
        if ((valType(cPJ_TPDIA)!="C").or.(empty(cPJ_TPDIA)))
            break
        endif
        
        cKey:=cPJ_XJNTRAB
        cKey+=cPJ_TPDIA
        
        xRet:=Posicione(cAliasSPJORNTRAB,1,cKey,xGet)

    end sequence

return(xRet)

static function Time2NextDay(cTime as character) as character 
return(timeCalc():Time2NextDay(cTime)[1])
