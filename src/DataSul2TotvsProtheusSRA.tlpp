#include "totvs.ch"

#include "execin.th"
EXECIN CLASS SRAImport

static function SRAGetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SRASetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SRAImportData(oMsNewProcess as object,lEnd as logical,lPercentage as logical) as logical

    local aAddIndex as array

    local bSourceSetFilter as codeblock

    local cAlias:="SRA" as character
    local cIndexKey as character
    local cTableImport:="SRA" as character

    local lSRAImport as logical

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oTLogReport:=tLogReport():New() as object

    cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","RA_FILIAL+RA_MAT"))
    aAddIndex:=cTools():StrTokArray(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","RA_FILIAL,RA_MAT")),",")

    bSourceSetFilter:={|jJSOnLine|SRASourceFilter(jJSOnLine,oTFIni)}
    cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)

    lSRAImport:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)

    if ((lSRAImport).and.(!lEnd))
        oMsNewProcess:SetRegua1(0)
        oMsNewProcess:IncRegua1("Wait!")
        oMsNewProcess:SetRegua2(0)
        oMsNewProcess:IncRegua2("...")
        cTableImport:="SRA_RHPF"
        cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","RA_MATMIG"))
        FWFreeArray(@aAddIndex)
        aAddIndex:=cTools():StrTokArray(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","RA_MATMIG")),",")
        lSRAImport:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)
        if ((lSRAImport).and.(!lEnd))
            oMsNewProcess:SetRegua1(0)
            oMsNewProcess:IncRegua1("Wait!")
            oMsNewProcess:SetRegua2(0)
            oMsNewProcess:IncRegua2("...")
            cTableImport:="SRA_SPED"
            cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","RA_FILIAL+RA_MAT"))
            FWFreeArray(@aAddIndex)
            aAddIndex:=cTools():StrTokArray(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","RA_FILIAL,RA_MAT")),",")
            cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)
            lSRAImport:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)
            if ((lSRAImport).and.(!lEnd))
                ApMsgInfo(cAlias+" Table Import Completed","Info")
            elseif (!lEnd)
                ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
            endif            
        elseif (!lEnd)
            ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
        endif
    endif

    oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
    MsAguarde({||oTLogReport:FreeObj()},"Releasing temporary files and workspace memory...","Wait...")
    FreeObj(@oTLogReport)

    FWFreeArray(@aAddIndex)

    DelClassIntF()

return(lSRAImport)

static function SRASourceFilter(jJSOnLine as json,oTFIni as object) as logical

    local aLine:=jJSOnLine["uLine"] as array
    
    local lFilter:=.T. as logical

    local xFilter as variant

    begin sequence
        lFilter:=(Len(aLine)>=2)
        if (!lFilter)
            break
        endif
        xFilter:=strTran(aLine[1],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaEmpresas",xFilter,.T.,.T.)
        lFilter:=(xFilter==cEmpAnt)
        if (!lFilter)
            break
        endif
        xFilter:=aLine[2]
        xFilter:=strTran(aLine[2],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaFiliais",xFilter,.T.,.T.)
        lFilter:=(!empty(xFilter))
    end sequence

return(lFilter)
