#include "totvs.ch"

#IFNDEF _AMARC_CH    

    #DEFINE _AMARC_CH    

        #DEFINE ELEMENTOS_AMARC      50    //Numero de Elementos do Array aMarcacoes

        #DEFINE AMARC_DATA           01    //Data da Marcacao
        #DEFINE AMARC_HORA           02    //Hora da Marcacao
        #DEFINE AMARC_ORDEM          03    //Ordem da Marcacao
        #DEFINE AMARC_FLAG           04    //Flag (Origem) da Marcacao
        #DEFINE AMARC_RECNO          05    //Recno ou Logico Alterar Ordem/Turno
        #DEFINE AMARC_TURNO          06    //Turno da Marcacao
        #DEFINE AMARC_FUNCAO         07    //Funcao do Relogio
        #DEFINE AMARC_GIRO           08    //Giro do Relogio
        #DEFINE AMARC_CC             09    //Centro de Custo da Marcacao
        #DEFINE AMARC_APONTA         10    //Flag de Marcacao Apontada
        #DEFINE AMARC_RELOGIO        11    //Relogio da Marcacao
        #DEFINE AMARC_TIPOMARC       12    //Flag de Tipo de Marcacao
        #DEFINE AMARC_L_ORIGEM       13    //Define Se a Marcacao Pode ou Nao ser (Re)Ordenada
        #DEFINE AMARC_DTHR2STR       14    //String de Data/Hora para aSort
        #DEFINE AMARC_PERAPONTA      15    //String de Data com o Periodo de Apontamento
        #DEFINE AMARC_SEQ            16    //String de Sequencia da Tabela Padrao
        #DEFINE AMARC_DIA            17    //String de Dia da Semana da Tabela de Horario Padrao
        #DEFINE AMARC_PROCESSO       18    //Processo
        #DEFINE AMARC_ROTEIRO        19    //Roteiro
        #DEFINE AMARC_PERIODO        20    //Periodo
        #DEFINE AMARC_NUM_PAGTO      21    //Num. pagto                        
        #DEFINE AMARC_DEPTO          22    //Depto
        #DEFINE AMARC_POSTO          23    //Posto
        #DEFINE AMARC_CODFUNC        24    //C?. FUnc        
        #DEFINE AMARC_DATAAPO        25    //Data de Apontamento
        #DEFINE AMARC_NUMREP         26    //N?ero do REP
        #DEFINE AMARC_TPMCREP        27    //Tipo de Marca?o no REP
        #DEFINE AMARC_TIPOREG        28    //Tipo de Registro
        #DEFINE AMARC_MOTIVRG        29    //Motivo Modifica?o do Registro
        #DEFINE AMARC_TNOPC          30    //Flag para controlar turno opcional
        #DEFINE AMARC_EMPORG         31    //Empresa Origem da marcacao
        #DEFINE AMARC_FILORG         32    //Filial Origem da marcacao
        #DEFINE AMARC_MATORG         33    //Matricula Origem da marcacao
        #DEFINE AMARC_DHORG          34    //Data/Hora Origem da marcacao
        #DEFINE AMARC_IDORG          35    //Identificacao da Origem da marcacao
        #DEFINE AMARC_LATITU         36    //Latitude 
        #DEFINE AMARC_LONGIT         37    //Longitude
        #DEFINE AMARC_GEOFENCE       38    //Define se a marca?o est?dentro ou fora do per?etro
        //...Outros Elementos de aMarcacoes

#ENDIF

#include "execin.th"
EXECIN CLASS SP8Import

static function SP8ImportData(oMsNewProcess as object,lEnd as logical) as logical

    local aAddIndex as array

    local bCustomUpdate as codeblock
    local bSourceSetFilter as codeblock
    local bEnableFilterBlock as codeblock
    local bEnableFilterBlockMem as codeblock

    local cAlias:="SP8" as character
    local cIndexKey as character
    local cTableImport:="SP8" as character

    local cFilDe as character
    local cFilAte as character

    local cMatDe as character
    local cMatAte as character

    local dDataDe as date
    local dDataAte as date

    local nSizeMat as numeric

    local nEndLine as numeric
    local nStartLine as numeric

    local lSP8Import as logical
    local lEnableFilterBlock as logical

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oSP8Pergunte:=tHash():New() as object
    local oTLogReport:=tLogReport():New() as object

    begin sequence

        lEnableFilterBlock:=(allTrim(oTFIni:GetPropertyValue(cAlias,"EnableFilterBlock","0"))=="1")
        if (lEnableFilterBlock)
            if (!SP8Pergunte(@oSP8Pergunte))
                break
            endif
            cFilDe:=oSP8Pergunte:Get("Filial.De")
            cFilAte:=oSP8Pergunte:Get("Filial.Ate")
            dDataDe:=oSP8Pergunte:Get("Data.De")
            dDataAte:=oSP8Pergunte:Get("Data.Ate")
            cMatDe:=oSP8Pergunte:Get("Matricula.De")
            cMatAte:=oSP8Pergunte:Get("Matricula.Ate")
            nStartLine:=oSP8Pergunte:Get("Linha.Inicial")
            nEndLine:=oSP8Pergunte:Get("Linha.Final")
            bEnableFilterBlock:={|cAlias|;
                (cAlias)->(;
                    (P8_FILIAL>=cFilDe).and.;
                    (P8_FILIAL<=cFilAte).and.;
                    (P8_DATA>=dDataDe).and.;
                    (P8_DATA<=dDataAte).and.;
                    (P8_MAT>=cMatDe).and.;
                    (P8_MAT<=cMatAte);
                );
            }
            bEnableFilterBlockMem:={|xValue,cField|;
                (;
                    IF((cField=="P8_FILIAL"),;
                        ((xValue>=cFilDe).and.(xValue<=cFilAte)),;
                        IF(;
                            (cField=="P8_DATA"),;
                            ((xValue>=dDataDe).and.(xValue<=dDataAte)),;
                            IF(;
                                (cField=="P8_MAT"),;
                                ((xValue>=cMatDe).and.(xValue<=cMatAte)),;
                                .T.;
                            );
                        );
                    );
                );
            }
            nSizeMat:=getSX3Cache("RA_MAT","X3_TAMANHO")
            bSourceSetFilter:={|cLine|SP8SourceFilter(cLine,oTFIni,dDataDe,dDataAte,cMatDe,cMatAte,nSizeMat,cFilDe,cFilAte)}
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EndLine",nEndLine)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"StartLine",nStartLine)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EnableFilterBlock",bEnableFilterBlock)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EnableFilterBlockMem",bEnableFilterBlockMem)
        else
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EndLine")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"StartLine")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"SourceSetFilter")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EnableFilterBlock")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EnableFilterBlockMem")
        endif

        cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","P8_FILIAL+P8_MAT+P8_ORDEM+Dtos(P8_DATA)+Str(P8_HORA,5,2)"))
        aAddIndex:=strToKArr2(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","P8_FILIAL,P8_MAT,P8_ORDEM,P8_DATA,P8_HORA")),",")

        bCustomUpdate:={;
            |;
                cTmpAlias,;
                cAlias,;
                lFound,;
                lAddNew,;
                cIndexKey,;
                cIndexID,;
                nFields,;
                aTargetFieldsDef;
            |;
            SP8CustomUpdate(@cTmpAlias,@cAlias,@lFound,@lAddNew,@cIndexKey,@cIndexID,@nFields,@aTargetFieldsDef);
        }

        lSP8Import:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex,/*lPreLoadTable*/,bCustomUpdate)

        if (lSP8Import)
            ApMsgInfo(cAlias+" Table Import Completed","Info")
        else
            ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
        endif

        oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
        MsAguarde({||oTLogReport:Clean()},"Releasing temporary files and workspace memory...","Wait...")
        oTLogReport:=FreeObj(oTLogReport)

        FWFreeArray(@aAddIndex)

    end sequence   

    if (valtype(oSP8Pergunte)=="O")
        oSP8Pergunte:Clear()
        oSP8Pergunte:=FreeObj(oSP8Pergunte)
    endif

    DelClassIntF()

return(lSP8Import)

static function SP8Pergunte(oSP8Pergunte as object) as logical

    local aPBoxPrm:=Array(0) as array
    local aPBoxRet:=Array(0) as array

    local cPBoxTit:=OemToAnsi("Informe os parametros") as character

    local cFilDe as character
    local cFilAte as character

    local cMatDe as character
    local cMatAte as character

    local dDataDe:=CToD("") as date
    local dDataAte:=CToD("") as date

    local lParamBox:=.F. as logical

    local nPBox as numeric
    local nP8Mat as numeric
    local nP8Data as numeric
    local nP8Filial as numeric

    saveInter()

        nP8Filial:=GetSx3Cache("P8_FILIAL","X3_TAMANHO")
        cFilDe:=Space(nP8Filial)
        cFilAte:=cFilDe
        
        nP8Mat:=GetSx3Cache("P8_MAT","X3_TAMANHO")
        cMatDe:=Space(nP8Mat)
        cMatAte:=cMatDe

        nP8Data:=GetSx3Cache("P8_DATA","X3_TAMANHO")

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //01----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Filial.De"     //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cFilDe          //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="XM0"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Filial,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //02----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Filial.Ate"    //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cFilAte         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="XM0"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Filial,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //03----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Data.De"       //[2]:Descricao
        aPBoxPrm[nPBox][3]:=dDataDe         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@D"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""              //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=(CalcFieldSize("D",nP8Data,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])+20) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //04----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Data.Ate"      //[2]:Descricao
        aPBoxPrm[nPBox][3]:=dDataAte        //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@D"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""              //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=(CalcFieldSize("D",nP8Data,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])+20) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //05----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Matricula.De"  //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cMatDe          //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="SRA"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Mat,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //06----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Matricula.Ate" //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cMatAte         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="SRA"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Mat,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //07----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1                 //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Linha.Inicial"   //[2]:Descricao
        aPBoxPrm[nPBox][3]:=1                 //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="9999999999999999"//[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="(NaoVazio().and.IF(MV_PAR08>=IF(MV_PAR07>9999999999999990,(MV_PAR07:=9999999999999990),MV_PAR07),AllWaysTrue(),(MV_PAR08:=MV_PAR07,AllWaysTrue())))"//[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""                //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()"   //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("N",Len(aPBoxPrm[nPBox][4]),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.               //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //08----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1                 //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Linha.Final"     //[2]:Descricao
        aPBoxPrm[nPBox][3]:=9999999999999990  //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="9999999999999999"//[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio().and.(IF(MV_PAR08>9999999999999990,(MV_PAR08:=9999999999999990),MV_PAR08)>=MV_PAR07)"//[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""                //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="IF(IF(IF(MV_PAR08>9999999999999990,(MV_PAR08:=9999999999999990),MV_PAR08)<MV_PAR07,(MV_PAR08:=MV_PAR07),MV_PAR08)>=MV_PAR07,AllWaysTrue(),(MV_PAR08:=MV_PAR07,AllWaysTrue()))"//[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("N",Len(aPBoxPrm[nPBox][4]),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.               //[9]:Flag .T./.F. Parametro Obrigatorio ?

        while (!(lParamBox:=ParamBox(@aPBoxPrm,@cPBoxTit,@aPBoxRet,NIL,NIL,.T.,NIL,NIL,NIL,NIL,.T.,.T.)))
            lParamBox:=MsgYesNo("Deseja Abortar a Importacao?","Atencao!")
            if (lParamBox)
                lParamBox:=.F.
                exit
            endif
        end while

        if (lParamBox)
            for nPBox:=1 To Len(aPBoxPrm)
                oSP8Pergunte:Set(aPBoxPrm[nPBox][2],aPBoxRet[nPBox])
            next nPBox
        endif

    restInter()

    FWFreeArray(@aPBoxRet)
    FWFreeArray(@aPBoxPrm)

return(lParamBox)

static procedure SP8CustomUpdate(cTmpAlias as character,cAlias as character,lFound as logical,lAddNew as logical,cIndexKey as character,cIndexID as character,nFields as numeric,aTargetFieldsDef as array)

    local aMarcacoes:=array(0) as array

    local lPutMarcacoes as logical

    aAdd(aMarcacoes,array(ELEMENTOS_AMARC))

    aMarcacoes[1][AMARC_DATA]:=(cTmpAlias)->P8_DATA
    aMarcacoes[1][AMARC_HORA]:=(cTmpAlias)->P8_HORA
    aMarcacoes[1][AMARC_ORDEM]:=(cTmpAlias)->P8_ORDEM
    aMarcacoes[1][AMARC_FLAG]:=(cTmpAlias)->P8_FLAG
    aMarcacoes[1][AMARC_RECNO]:=0
    aMarcacoes[1][AMARC_TURNO]:=SRA->RA_TNOTRAB
    aMarcacoes[1][AMARC_FUNCAO]:=(cTmpAlias)->P8_FUNCAO
    aMarcacoes[1][AMARC_GIRO]:=(cTmpAlias)->P8_GIRO
    aMarcacoes[1][AMARC_CC]:=(cTmpAlias)->P8_CC
    aMarcacoes[1][AMARC_APONTA]:=(cTmpAlias)->P8_APONTA
    aMarcacoes[1][AMARC_RELOGIO]:=(cTmpAlias)->P8_RELOGIO
    aMarcacoes[1][AMARC_TIPOMARC]:=(cTmpAlias)->P8_TPMARCA
    aMarcacoes[1][AMARC_L_ORIGEM]:=.F.
    /*
    aMarcacoes[1][AMARC_DTHR2STR]:=nil
    aMarcacoes[1][AMARC_PERAPONTA]:=nil
    aMarcacoes[1][AMARC_SEQ]:=nil
    aMarcacoes[1][AMARC_DIA]:=nil
    aMarcacoes[1][AMARC_PROCESSO]:=nil
    aMarcacoes[1][AMARC_ROTEIRO]:=nil
    aMarcacoes[1][AMARC_PERIODO]:=nil
    aMarcacoes[1][AMARC_NUM_PAGTO]:=nil
    aMarcacoes[1][AMARC_DEPTO]:=nil
    aMarcacoes[1][AMARC_POSTO]:=nil
    aMarcacoes[1][AMARC_CODFUNC]:=nil
    aMarcacoes[1][AMARC_DATAAPO]:=nil
    aMarcacoes[1][AMARC_NUMREP]:=nil
    aMarcacoes[1][AMARC_TPMCREP]:=nil
    aMarcacoes[1][AMARC_TIPOREG]:=nil
    aMarcacoes[1][AMARC_MOTIVRG]:=nil
    aMarcacoes[1][AMARC_TNOPC]:=nil
    aMarcacoes[1][AMARC_EMPORG]:=nil
    aMarcacoes[1][AMARC_FILORG]:=nil
    aMarcacoes[1][AMARC_MATORG]:=nil
    aMarcacoes[1][AMARC_DHORG]:=nil
    aMarcacoes[1][AMARC_IDORG]:=nil
    aMarcacoes[1][AMARC_LATITU]:=nil
    aMarcacoes[1][AMARC_LONGIT]:=nil
    aMarcacoes[1][AMARC_GEOFENCE]:=nil
    //...Outros Elementos de aMarcacoes
    */

    lPutMarcacoes:=PutMarcacoes(;
        aMarcacoes,;//01 -> Array contendo as Marcacoes do Funcionario
        (cTmpAlias)->P8_FILIAL,;//02 -> Filial do Funcionario
        (cTmpAlias)->P8_MAT,;//03 -> Matricula do Funcionario
        cAlias,;//04 -> Arquivo para Gravacao ( "SP8" ou "SPG" )
        lAddNew,;//05 -> Se Forca a Inclusao de Novo Registro
        .T.,;//06 -> Se Forca a Substituicao da Data/Hora
        nil,;//07 -> Posicao Inicial para o aMarcacoes
        .T.,;//08 -> Se Forca a Substituicao de Tudo
        .F.,;//09 -> Se eh executado via workflow
        1,;//10 -> Se leitura, apontamento ou ambos
        .F.;//11 -> Se deve gravar campos do usu?io
    )

    FWFreeArray(@aMarcacoes)

return

static function SP8GetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SP8SetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SP8SourceFilter(cLine as character,oTFIni as object,dDataDe as date,dDataAte as date,cMatDe as character,cMatAte as character,nSizeMat as numeric,cFilDe as character,cFilAte as character) as logical

    local aLine as array

    local nAT as numeric

    local lFilter:=.T. as logical

    local xFilter as variant

    begin sequence
        if (empty(cLine))
            break
        endif
        cLine:=subStr(cLine,1,39)
        nAT:=RAT(";",cLine)
        if (nAT>0)
            cLine:=substr(cLine,1,(nAT-1))
        endif
        aLine:=strToKArr2(cLine,";")
        if (empty(aLine).or.(Len(aLine)<5))
            break
        endif
        xFilter:=CToD(aLine[5])
        lFilter:=((xFilter>=dDataDe).and.(xFilter<=dDataAte))
        if (!lFilter)
            break
        endif
        xFilter:=PadL(aLine[3],nSizeMat,"0")
        lFilter:=((xFilter>=cMatDe).and.(xFilter<=cMatAte))
        if (!lFilter)
            break
        endif
        xFilter:=aLine[2]
        xFilter:=strTran(aLine[2],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaFiliais",xFilter,.T.,.T.)
        lFilter:=((xFilter>=cFilDe).and.(xFilter<=cFilAte))
        if (!lFilter)
            break
        endif
    end sequence

    FWFreeArray(@aLine)

return(lFilter)
