#include "totvs.ch"

#include "tlpp-core.th"

namespace dna.tech.DataSul2Protheus

using namespace dna.tech
using namespace dna.tech.DataSul2Protheus

#include "execin.th"
EXECIN CLASS SP8Import

static function SP8GetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SP8SetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SetFilAnt(cFil as character)
return(dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.SetFilAnt",@cFil))

static function SP8ImportData(oMsNewProcess as object,lEnd as logical,lPercentage as logical) as logical

    local aAddIndex as array

    local bCustomUpdate as codeblock
    local bSourceSetFilter as codeblock
    local bEnableFilterBlock as codeblock
    local bEnableFilterBlockMem as codeblock

    local cAlias:="SP8" as character
    local cIndexKey as character
    local cTableImport:="SP8" as character

    local cFilDe as character
    local cFilAte as character

    local cMatDe as character
    local cMatAte as character

    local dDataDe as date
    local dDataAte as date

    local nSizeMat as numeric

    local nEndLine as numeric
    local nStartLine as numeric

    local lSP8Import as logical
    local lEnableFilterBlock as logical

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oSP8Pergunte:=tHash():New() as object
    local oTLogReport:=tLogReport():New() as object

    begin sequence

        oTFIni:SetPropertyValue(cTableImport,"TCSQLUpdateTable","0")
        lEnableFilterBlock:=(allTrim(oTFIni:GetPropertyValue(cTableImport,"EnableFilterBlock","0"))=="1")
        if (lEnableFilterBlock)
            if (!SP8Pergunte(@oSP8Pergunte))
                break
            endif
            cFilDe:=oSP8Pergunte:Get("Filial.De")
            cFilAte:=oSP8Pergunte:Get("Filial.Ate")
            dDataDe:=oSP8Pergunte:Get("Data.De")
            dDataAte:=oSP8Pergunte:Get("Data.Ate")
            cMatDe:=oSP8Pergunte:Get("Matricula.De")
            cMatAte:=oSP8Pergunte:Get("Matricula.Ate")
            nStartLine:=oSP8Pergunte:Get("Linha.Inicial",1)
            nEndLine:=oSP8Pergunte:Get("Linha.Final",9999999999999990)
            bEnableFilterBlock:={|cAlias|;
                (cAlias)->(;
                    (P8_FILIAL>=cFilDe).and.;
                    (P8_FILIAL<=cFilAte).and.;
                    (P8_DATA>=dDataDe).and.;
                    (P8_DATA<=dDataAte).and.;
                    (P8_MAT>=cMatDe).and.;
                    (P8_MAT<=cMatAte);
                );
            }
            bEnableFilterBlockMem:={|xValue,cField|;
                (;
                    IF((cField=="P8_FILIAL"),;
                        ((xValue>=cFilDe).and.(xValue<=cFilAte)),;
                        IF(;
                            (cField=="P8_DATA"),;
                            ((xValue>=dDataDe).and.(xValue<=dDataAte)),;
                            IF(;
                                (cField=="P8_MAT"),;
                                ((xValue>=cMatDe).and.(xValue<=cMatAte)),;
                                .T.;
                            );
                        );
                    );
                );
            }
            nSizeMat:=getSX3Cache("RA_MAT","X3_TAMANHO")
            bSourceSetFilter:={|jJSOnLine|SP8SourceFilter(jJSOnLine,oTFIni,dDataDe,dDataAte,cMatDe,cMatAte,nSizeMat,cFilDe,cFilAte,oTLogReport)}
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EndLine",nEndLine)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"StartLine",nStartLine)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EnableFilterBlock",bEnableFilterBlock)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EnableFilterBlockMem",bEnableFilterBlockMem)
        else
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EndLine")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"StartLine")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"SourceSetFilter")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EnableFilterBlock")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EnableFilterBlockMem")
        endif

        cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","P8_FILIAL+P8_MAT+P8_ORDEM+Dtos(P8_DATA)+Str(P8_HORA,5,2)"))
        aAddIndex:=ctools():StrTokCountArray(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","P8_FILIAL,P8_MAT,P8_ORDEM,P8_DATA,P8_HORA")),",")

        bCustomUpdate:={;
            |;
                cTmpAlias,;
                cAlias,;
                lFound,;
                lAddNew,;
                cIndexKey,;
                cIndexID,;
                nFields,;
                aTargetFieldsDef,;
                oTLogReport,;
                nTmpAliasNextRecNo,;
                nTmpAliasOrder,;
                nRecProc;
            |;
            SP8CustomUpdate(@cTmpAlias,@cAlias,@lFound,@lAddNew,@cIndexKey,@cIndexID,@nFields,@aTargetFieldsDef,oTLogReport,@nTmpAliasNextRecNo,@nTmpAliasOrder,@nRecProc);
        }

        lSP8Import:=dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex,/*lPreLoadTable*/,bCustomUpdate)

        if (lSP8Import)
            ApMsgInfo(cAlias+" Table Import Completed","Info")
        else
            ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
        endif

        oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
        MsAguarde({||oTLogReport:FreeObj()},"Releasing temporary files and workspace memory...","Wait...")
        FreeObj(@oTLogReport)

        FWFreeArray(@aAddIndex)

    end sequence

    if (valtype(oSP8Pergunte)=="O")
        oSP8Pergunte:Clear()
        FreeObj(@oSP8Pergunte)
    endif

    DelClassIntF()

return(lSP8Import)

static function SP8Pergunte(oSP8Pergunte as object) as logical

    local aPBoxPrm:=Array(0) as array
    local aPBoxRet:=Array(0) as array

    local cPBoxTit:=OemToAnsi("Informe os parametros") as character

    local cFilDe as character
    local cFilAte as character

    local cMatDe as character
    local cMatAte as character

    local dDataDe:=CToD("") as date
    local dDataAte:=CToD("") as date

    local lParamBox:=.F. as logical

    local nPBox as numeric
    local nP8Mat as numeric
    local nP8Data as numeric
    local nP8Filial as numeric

    saveInter()

        nP8Filial:=GetSx3Cache("P8_FILIAL","X3_TAMANHO")
        cFilDe:=Space(nP8Filial)
        cFilAte:=cFilDe

        nP8Mat:=GetSx3Cache("P8_MAT","X3_TAMANHO")
        cMatDe:=Space(nP8Mat)
        cMatAte:=cMatDe

        nP8Data:=GetSx3Cache("P8_DATA","X3_TAMANHO")

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //01----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Filial.De"     //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cFilDe          //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="XM0"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Filial,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //02----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Filial.Ate"    //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cFilAte         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="XM0"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Filial,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //03----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Data.De"       //[2]:Descricao
        aPBoxPrm[nPBox][3]:=dDataDe         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@D"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""              //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=(CalcFieldSize("D",nP8Data,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])+20) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //04----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Data.Ate"      //[2]:Descricao
        aPBoxPrm[nPBox][3]:=dDataAte        //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@D"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""              //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=(CalcFieldSize("D",nP8Data,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])+20) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //05----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Matricula.De"  //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cMatDe          //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="SRA"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Mat,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //06----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Matricula.Ate" //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cMatAte         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="SRA"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nP8Mat,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        if (.F.)

            aAdd(aPBoxPrm,Array(9))
            nPBox:=Len(aPBoxPrm)
            //07----------------------------------------------------------------------------------------------
            aPBoxPrm[nPBox][1]:=1                 //[1]:1 - MsGet
            aPBoxPrm[nPBox][2]:="Linha.Inicial"   //[2]:Descricao
            aPBoxPrm[nPBox][3]:=1                 //[3]:String contendo o inicializador do campo
            aPBoxPrm[nPBox][4]:="9999999999999999"//[4]:String contendo a Picture do campo
            aPBoxPrm[nPBox][5]:="(NaoVazio().and.IF(MV_PAR08>=IF(MV_PAR07>9999999999999990,(MV_PAR07:=9999999999999990),MV_PAR07),AllWaysTrue(),(MV_PAR08:=MV_PAR07,AllWaysTrue())))"//[5]:String contendo a validacao
            aPBoxPrm[nPBox][6]:=""                //[6]:Consulta F3
            aPBoxPrm[nPBox][7]:="AllWaysTrue()"   //[7]:String contendo a validacao When
            aPBoxPrm[nPBox][8]:=CalcFieldSize("N",Len(aPBoxPrm[nPBox][4]),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
            aPBoxPrm[nPBox][9]:=.F.               //[9]:Flag .T./.F. Parametro Obrigatorio ?

            aAdd(aPBoxPrm,Array(9))
            nPBox:=Len(aPBoxPrm)
            //08----------------------------------------------------------------------------------------------
            aPBoxPrm[nPBox][1]:=1                 //[1]:1 - MsGet
            aPBoxPrm[nPBox][2]:="Linha.Final"     //[2]:Descricao
            aPBoxPrm[nPBox][3]:=9999999999999990  //[3]:String contendo o inicializador do campo
            aPBoxPrm[nPBox][4]:="9999999999999999"//[4]:String contendo a Picture do campo
            aPBoxPrm[nPBox][5]:="NaoVazio().and.(IF(MV_PAR08>9999999999999990,(MV_PAR08:=9999999999999990),MV_PAR08)>=MV_PAR07)"//[5]:String contendo a validacao
            aPBoxPrm[nPBox][6]:=""                //[6]:Consulta F3
            aPBoxPrm[nPBox][7]:="IF(IF(IF(MV_PAR08>9999999999999990,(MV_PAR08:=9999999999999990),MV_PAR08)<MV_PAR07,(MV_PAR08:=MV_PAR07),MV_PAR08)>=MV_PAR07,AllWaysTrue(),(MV_PAR08:=MV_PAR07,AllWaysTrue()))"//[7]:String contendo a validacao When
            aPBoxPrm[nPBox][8]:=CalcFieldSize("N",Len(aPBoxPrm[nPBox][4]),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
            aPBoxPrm[nPBox][9]:=.F.               //[9]:Flag .T./.F. Parametro Obrigatorio ?

        endif

        while (!(lParamBox:=ParamBox(@aPBoxPrm,@cPBoxTit,@aPBoxRet,nil,nil,.T.,nil,nil,nil,nil,.T.,.T.)))
            lParamBox:=MsgYesNo("Deseja Abortar a Importacao?","Atencao!")
            if (lParamBox)
                lParamBox:=.F.
                exit
            endif
        end while

        if (lParamBox)
            for nPBox:=1 To Len(aPBoxPrm)
                oSP8Pergunte:Set(aPBoxPrm[nPBox][2],aPBoxRet[nPBox])
            next nPBox
        endif

    restInter()

    FWFreeArray(@aPBoxRet)
    FWFreeArray(@aPBoxPrm)

return(lParamBox)

static function SP8CustomUpdate(cTmpAlias as character,cAlias as character,lFound as logical,lAddNew as logical,cIndexKey as character,cIndexID as character,nFields as numeric,aTargetFieldsDef as array,oTLogReport as object,nTmpAliasNextRecNo as numeric,nTmpAliasOrder as numeric,nRecProc as numeric) as logical

    local aDetail:=array(0) as array

    local aPONM010Header:=array(0) as array
    local aPONM010Detail:=array(0) as array

    local aPONM010LogFile as array

    local cProcFil as character
    local cSVFilAnt:=SetFilAnt(cFilAnt)

    local cTmpAliasKey as character

    local cTLogGroup as character
    local cTLogDetail as character

    local cTxtTmp:="" as character
    local cTxtFind as character
    local cTxtReplace as character

    local dDataDe as date
    local dDataAte as date

    local lTXTTmp:=.F. as logical
    local lPutMarcacoes:=.T. as logical

    cProcFil:=(cTmpAlias)->P8_FILIAL
    SetFilAnt(cProcFil)

    cTmpAliasKey:=cProcFil
    cTmpAliasKey+=(cTmpAlias)->P8_MAT

    dDataDe:=(cTmpAlias)->P8_DATA

    (cTmpAlias)->(aAdd(aPONM010Header,{"RA_FILIAL",P8_FILIAL}))
    (cTmpAlias)->(aAdd(aPONM010Header,{"RA_MAT",P8_MAT}))

    while ((cTmpAlias)->(!eof().and.(P8_FILIAL+P8_MAT)==cTmpAliasKey))
        nRecProc++
        dDataAte:=(cTmpAlias)->P8_DATA
        if ((cTmpAlias)->(!dbEval():GetNextRecNo(@cTmpAlias,@nTmpAliasNextRecNo,@nTmpAliasOrder)))
            exit
        endif
        (cTmpAlias)->(aAdd(aDetail,{"P8_FILIAL",P8_FILIAL}))
        (cTmpAlias)->(aAdd(aDetail,{"P8_MAT",P8_MAT}))
        (cTmpAlias)->(aAdd(aDetail,{"P8_DATA",P8_DATA}))
        (cTmpAlias)->(aAdd(aDetail,{"P8_HORA",P8_HORA}))
        aAdd(aPONM010Detail,aClone(aDetail))
        aSize(aDetail,0)
        if ((cTmpAlias)->(!dbEval():GoToNextRecNo(@cTmpAlias,@nTmpAliasNextRecNo,@nTmpAliasOrder)))
            exit
        endif
    end while

    aPONM010LogFile:=PONM010(;
        .F./*lWork*/,;//01 -> Se o "Start" foi via WorkFlow
        .F./*lUserDef*/,;//02 -> Se deve considerar as configuracoes dos parametros do usuario
        .F./*lLimita*/,;//03 -> Se deve limitar a Data Final de Apontamento a Data Base
        cProcFil/*cProcFil*/,;//04 -> Filial a Ser Processada
        .T./*lProcFil*/,;//05 -> Processo por Filial
        .F./*lApoNLidas*/,;//06 -> Apontar quando nao Leu as Marcacoes para a Filial
        .T./*lForceR*/,;//07 -> Se deve Forcar o Reapontamento
        @aPONM010Header,;//08 -> Cabecalho do ExecAuto
        @aPONM010Detail,;//09 -> Itens do ExecAuto
        3/*nOpcAuto*/,;
        "1"/*cProcessa*/,;//11 -> '1'->Leitura , '2'->Apontamento , '3'->Ambos
        '1'/*cTipoRel*/,;//12 -> '1'->Funcionario , '2'->Relogio
        dDataDe/*dDataDe*/,;//13 -> Data inicio para leitura das marcacoes - Via Workflow
        dDataAte/*dDataAte*/;//14 -> Data Fim para leitura das marcacoes - Via Workflow
    )

    if (!empty(aPONM010LogFile).and.(len(aPONM010LogFile)>=2).and.(!aPONM010LogFile[1]))
        lPutMarcacoes:=.F.
        cTLogGroup:=cTools():Accentuation("Inconsist#1ncias na Inclus#2o das Marca#3#4es:","ecirc","atilde","ccedil","otilde")
        cTxtFind:="- Nao Foi Possivel Carregar as Marcacoes do Funcionario"
        cTxtReplace:="- Nao Foi Possivel Carregar as Marcacoes do Funcionario. Turno: "
        aEval(;
            aPONM010LogFile[2],;
            {|cTLogDetail|;
                if((cTXTFind$cTLogDetail),;
                    (;
                        lTXTTmp:=.T.,;
                        cTLogGroup:=strTran(cTLogDetail,cTXTFind,cTxtReplace);
                    ),;
                    if((lTXTTmp),;
                        cTxtTmp+=cTLogDetail,;
                        oTLogReport:AddDetail(cTLogGroup,cTLogDetail);
                    );
                );
            };
        )
        if (lTXTTmp)
            oTLogReport:AddDetail(cTLogGroup,strTran(cTxtTmp,"  "," "))
            cTxtTmp:=""
        endif
    endif

    FWFreeArray(@aDetail)
    FWFreeArray(@aPONM010Header)
    FWFreeArray(@aPONM010Detail)
    FWFreeArray(@aPONM010LogFile)

    SetFilAnt(cSVFilAnt)

return(lPutMarcacoes)

static function SP8SourceFilter(jJSOnLine as json,oTFIni as object,dDataDe as date,dDataAte as date,cMatDe as character,cMatAte as character,nSizeMat as numeric,cFilDe as character,cFilAte as character,oTLogReport as object) as logical

    local aLine:=jJSOnLine["uLine"] as array

    local cFil as character
    local cMat as character
    local cHora as character
    local cSP8KeySeek as character

    local dData as date

    local cTLogGroup as character
    local cTLogDetail as character

    local nHora as numeric
    local nSP8Order:=RetOrder("SP8","P8_FILIAL+P8_MAT+DTOS(P8_DATA)+STR(P8_HORA,5,2)")

    local lFilter:=.T. as logical

    local xFilter as variant

    begin sequence
        lFilter:=(Len(aLine)>=6)
        if (!lFilter)
            break
        endif
        xFilter:=CToD(aLine[5])
        lFilter:=((xFilter>=dDataDe).and.(xFilter<=dDataAte))
        if (!lFilter)
            break
        endif
        dData:=xFilter
        xFilter:=PadL(aLine[3],nSizeMat,"0")
        lFilter:=((xFilter>=cMatDe).and.(xFilter<=cMatAte))
        if (!lFilter)
            break
        endif
        cMat:=xFilter
        xFilter:=strTran(aLine[1],'"',"")
        xFilter:=dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.findInTable",oTFIni,"TabelaEmpresas",xFilter,.T.,.T.)
        lFilter:=(xFilter==cEmpAnt)
        if (!lFilter)
            break
        endif
        xFilter:=aLine[2]
        xFilter:=strTran(aLine[2],'"',"")
        xFilter:=dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.findInTable",oTFIni,"TabelaFiliais",xFilter,.T.,.T.)
        lFilter:=((xFilter>=cFilDe).and.(xFilter<=cFilAte))
        if (!lFilter)
            break
        endif
        cFil:=xFilter
        SRA->(dbSetOrder(1))
        lFilter:=SRA->(MsSeek(cFil+cMat,.F.))
        if (!lFilter)
            cTLogGroup:=cTools():Accentuation("Matricula n#1o localizada na Tabela SRA:","atilde")
            cTLogDetail:="Filial:["+cFil+"] Matricula:["+cMat+"]"
            if (oTLogReport:FindDetail(cTLogGroup,cTLogDetail)==0)
                oTLogReport:AddDetail(cTLogGroup,cTLogDetail)
            endif
            break
        endif
        nHora:=timeCalc():TimeToVal(timeCalc():SecsToTime(val(aLine[6])))
        cHora:=Str(nHora,5,2)
        //P8_FILIAL+P8_MAT+DTOS(P8_DATA)+STR(P8_HORA,5,2)
        SP8->(dbSetOrder(nSP8Order))
        cSP8KeySeek:=cFil
        cSP8KeySeek+=cMat
        cSP8KeySeek+=DToS(dData)
        cSP8KeySeek+=cHora
        lFilter:=SP8->(!dbSeek(cSP8KeySeek,.F.))
        if (!lFilter)
            cTLogGroup:=cTools():Accentuation("Marca#1#2o j#3 existente na tabela SP8:","ccedil","atilde","aacute")
            cTLogDetail:="Filial:["+cFil+"] Matricula:["+cMat+"] Data:["+DToC(dData)+"] Hora:["+cHora+"]"
            if (oTLogReport:FindDetail(cTLogGroup,cTLogDetail)==0)
                oTLogReport:AddDetail(cTLogGroup,cTLogDetail)
            endif
            break
        endif
    end sequence

return(lFilter)
