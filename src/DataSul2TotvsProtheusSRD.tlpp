#include "totvs.ch"

#include "execin.th"
EXECIN CLASS SRDImport

static function SRDGetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SRDSetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SRDImportData(oMsNewProcess as object,lEnd as logical,lPercentage as logical) as logical

    local aAddIndex as array

    local bSourceSetFilter as codeblock
    local bEnableFilterBlock as codeblock
    local bEnableFilterBlockMem as codeblock

    local cAlias:="SRD" as character
    local cIndexKey as character
    local cTableImport:="SRD" as character

    local cFilDe as character
    local cFilAte as character

    local cMatDe as character
    local cMatAte as character

    local cAnoDe as character
    local cAnoAte as character
    local cCompetenciaDe as character
    local cCompetenciaAte as character

    local lSRDImport as logical
    local lEnableFilterBlock as logical

    local nSizeMat as numeric

    local nEndLine as numeric
    local nStartLine as numeric

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oTLogReport:=tLogReport():New() as object
    local oSRDPergunte:=tHash():New() as object

    begin sequence

        lEnableFilterBlock:=(allTrim(oTFIni:GetPropertyValue(cTableImport,"EnableFilterBlock","0"))=="1")
        if (lEnableFilterBlock)
            if (!SRDPergunte(@oSRDPergunte))
                break
            endif
            cCompetenciaDe:=oSRDPergunte:Get("Competencia.De")
            cCompetenciaAte:=oSRDPergunte:Get("Competencia.Ate")
            cFilDe:=oSRDPergunte:Get("Filial.De")
            cFilAte:=oSRDPergunte:Get("Filial.Ate")
            cMatDe:=oSRDPergunte:Get("Matricula.De")
            cMatAte:=oSRDPergunte:Get("Matricula.Ate")
            nStartLine:=oSRDPergunte:Get("Linha.Inicial",1)
            nEndLine:=oSRDPergunte:Get("Linha.Final",9999999999999990)
            bEnableFilterBlock:={|cAlias|;
                (cAlias)->(;
                    (RD_DATARQ>=cCompetenciaDe).and.;
                    (RD_DATARQ<=cCompetenciaAte).and.;
                    (RD_FILIAL>=cFilDe).and.;
                    (RD_FILIAL<=cFilAte).and.;
                    (RD_MAT>=cMatDe).and.;
                    (RD_MAT<=cMatAte);
                );
            }
            bEnableFilterBlockMem:={|xValue,cField|;
                IF((cField=="RD_DATARQ"),;
                    ((xValue>=cCompetenciaDe).and.(xValue<=cCompetenciaAte)),;
                    IF((cField=="RD_PD"),;
                        (!empty(xValue).and.(SRDFindSRVPD(xValue))),;
                        IF(;
                            (cField=="RD_MAT"),;
                            ((xValue>=cMatDe).and.(xValue<=cMatAte)),;
                            IF(;
                                (cField=="RD_FILIAL"),;
                                ((xValue>=cFilDe).and.(xValue<=cFilAte)),;
                                .T.;
                            );
                        );
                    );
                );
            }
            nSizeMat:=getSX3Cache("RA_MAT","X3_TAMANHO")
            cAnoDe:=Left(cCompetenciaDe,4)
            cAnoAte:=Left(cCompetenciaAte,4)
            bSourceSetFilter:={|aLine|SRDSourceFilter(aLine,oTFIni,cCompetenciaDe,cCompetenciaAte,cMatDe,cMatAte,nSizeMat,cAnoDe,cAnoAte,cFilDe,cFilAte)}
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EndLine",nEndLine)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"StartLine",nStartLine)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EnableFilterBlock",bEnableFilterBlock)
            cacheData():Set("datasul2totvsprotheus",cTableImport+"EnableFilterBlockMem",bEnableFilterBlockMem)
        else
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EndLine")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"StartLine")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"SourceSetFilter")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EnableFilterBlock")
            cacheData():DelProperty("datasul2totvsprotheus",cTableImport+"EnableFilterBlockMem")
        endif

        cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","RD_FILIAL+RD_MAT+RD_CC+RD_ITEM+RD_CLVL+RD_DATARQ+RD_PD+RD_SEQ+RD_PERIODO+RD_SEMANA+RD_ROTEIR+DTOS(RD_DTREF)+RD_CONVOC+RD_NRBEN"))
        aAddIndex:=strToKArr2(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","RD_FILIAL,RD_MAT,RD_CC,RD_ITEM,RD_CLVL,RD_DATARQ,RD_PD,RD_SEQ,RD_PERIODO,RD_SEMANA,RD_ROTEIR,RD_DTREF,RD_CONVOC,RD_NRBEN")),",",.T.)

        cacheData():Set("datasul2totvsprotheus","SRDImportDataLogReport",oTLogReport)

        lSRDImport:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)

        if (lSRDImport)
            ApMsgInfo(cAlias+" Table Import Completed","Info")
        else
            ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
        endif

        oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
        MsAguarde({||oTLogReport:FreeObj()},"Releasing temporary files and workspace memory...","Wait...")
        oTLogReport:=FreeObj(oTLogReport)

        cacheData():DelProperty("datasul2totvsprotheus",cAlias+"LogReport")

        FWFreeArray(@aAddIndex)

    end sequence

    if (findFunction("RstPosAlias"))
        RstPosAlias()
    endif

    if (valtype(oSRDPergunte)=="O")
        oSRDPergunte:Clear()
        oSRDPergunte:=FreeObj(oSRDPergunte)
    endif

    if (findFunction("RstPosAlias"))
        RstPosAlias()
    endif

    if (type("oPVTHMSRDSeq")=="O")
        oPVTHMSRDSeq:Clean()
        oPVTHMSRDSeq:=FreeObj(oPVTHMSRDSeq)
    endif

    if (type("oPVTHMFindSRVPD")=="O")
        oPVTHMFindSRVPD:Clean()
        oPVTHMFindSRVPD:=FreeObj(oPVTHMFindSRVPD)
    endif

    DelClassIntF()

return(lSRDImport)

static function SRDPergunte(oSRDPergunte as object) as logical

    local aPBoxPrm:=Array(0) as array
    local aPBoxRet:=Array(0) as array

    local cPBoxTit:=OemToAnsi("Informe os parametros") as character

    local cDatArq as character
    local cFilDe as character
    local cFilAte as character

    local cMatDe as character
    local cMatAte as character

    local lParamBox:=.F. as logical

    local nPBox as numeric
    local nRDMat as numeric
    local nDatArq as numeric
    local nRDFilial as numeric

    saveInter()

        nDatArq:=GetSx3Cache("RD_DATARQ","X3_TAMANHO")
        cDatArq:=Space(nDatArq)

        nRDFilial:=GetSx3Cache("RD_FILIAL","X3_TAMANHO")
        cFilDe:=Space(nRDFilial)
        cFilAte:=cFilDe

        nRDMat:=GetSx3Cache("RD_MAT","X3_TAMANHO")
        cMatDe:=Space(nRDMat)
        cMatAte:=cMatDe

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //01----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Competencia.De"//[2]:Descricao
        aPBoxPrm[nPBox][3]:=cDatArq  //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@R 9999/99"    //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""              //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nDatArq,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //02----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1                //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Competencia.Ate"//[2]:Descricao
        aPBoxPrm[nPBox][3]:=cDatArq   //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@R 9999/99"     //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"     //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=""               //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()"  //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nDatArq,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])  //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.              //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //03----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Filial.De"     //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cFilDe          //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="XM0"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nRDFilial,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //04----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Filial.Ate"    //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cFilAte         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="XM0"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nRDFilial,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //05----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Matricula.De"  //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cMatDe          //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="AllWaysTrue()" //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="SRA"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nRDMat,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.F.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        //06----------------------------------------------------------------------------------------------
        aPBoxPrm[nPBox][1]:=1               //[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Matricula.Ate" //[2]:Descricao
        aPBoxPrm[nPBox][3]:=cMatAte         //[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"            //[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="NaoVazio()"    //[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:="SRA"           //[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="AllWaysTrue()" //[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=CalcFieldSize("C",nRDMat,0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.             //[9]:Flag .T./.F. Parametro Obrigatorio ?

        if (.F.)

            aAdd(aPBoxPrm,Array(9))
            nPBox:=Len(aPBoxPrm)
            //07----------------------------------------------------------------------------------------------
            aPBoxPrm[nPBox][1]:=1                 //[1]:1 - MsGet
            aPBoxPrm[nPBox][2]:="Linha.Inicial"   //[2]:Descricao
            aPBoxPrm[nPBox][3]:=1                 //[3]:String contendo o inicializador do campo
            aPBoxPrm[nPBox][4]:="9999999999999999"//[4]:String contendo a Picture do campo
            aPBoxPrm[nPBox][5]:="(NaoVazio().and.IF(MV_PAR08>=IF(MV_PAR07>9999999999999990,(MV_PAR07:=9999999999999990),MV_PAR07),AllWaysTrue(),(MV_PAR08:=MV_PAR07,AllWaysTrue())))"//[5]:String contendo a validacao
            aPBoxPrm[nPBox][6]:=""                //[6]:Consulta F3
            aPBoxPrm[nPBox][7]:="AllWaysTrue()"   //[7]:String contendo a validacao When
            aPBoxPrm[nPBox][8]:=CalcFieldSize("N",Len(aPBoxPrm[nPBox][4]),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
            aPBoxPrm[nPBox][9]:=.F.               //[9]:Flag .T./.F. Parametro Obrigatorio ?

            aAdd(aPBoxPrm,Array(9))
            nPBox:=Len(aPBoxPrm)
            //08----------------------------------------------------------------------------------------------
            aPBoxPrm[nPBox][1]:=1                 //[1]:1 - MsGet
            aPBoxPrm[nPBox][2]:="Linha.Final"     //[2]:Descricao
            aPBoxPrm[nPBox][3]:=9999999999999990  //[3]:String contendo o inicializador do campo
            aPBoxPrm[nPBox][4]:="9999999999999999"//[4]:String contendo a Picture do campo
            aPBoxPrm[nPBox][5]:="NaoVazio().and.(IF(MV_PAR08>9999999999999990,(MV_PAR08:=9999999999999990),MV_PAR08)>=MV_PAR07)"//[5]:String contendo a validacao
            aPBoxPrm[nPBox][6]:=""                //[6]:Consulta F3
            aPBoxPrm[nPBox][7]:="IF(IF(IF(MV_PAR08>9999999999999990,(MV_PAR08:=9999999999999990),MV_PAR08)<MV_PAR07,(MV_PAR08:=MV_PAR07),MV_PAR08)>=MV_PAR07,AllWaysTrue(),(MV_PAR08:=MV_PAR07,AllWaysTrue()))"//[7]:String contendo a validacao When
            aPBoxPrm[nPBox][8]:=CalcFieldSize("N",Len(aPBoxPrm[nPBox][4]),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2]) //[8]:Tamanho do MsGet
            aPBoxPrm[nPBox][9]:=.F.               //[9]:Flag .T./.F. Parametro Obrigatorio ?

        endif

        while (!(lParamBox:=ParamBox(@aPBoxPrm,@cPBoxTit,@aPBoxRet,nil,nil,.T.,nil,nil,nil,nil,.T.,.T.)))
            lParamBox:=MsgYesNo("Deseja Abortar a Importacao?","Atencao!")
            if (lParamBox)
                lParamBox:=.F.
                exit
            endif
        end while

        if (lParamBox)
            for nPBox:=1 To Len(aPBoxPrm)
                oSRDPergunte:Set(aPBoxPrm[nPBox][2],aPBoxRet[nPBox])
            next nPBox
        endif

    restInter()

    FWFreeArray(@aPBoxRet)
    FWFreeArray(@aPBoxPrm)

return(lParamBox)

static function SRDGetRVTipo(cRDPD) as character
    local cRVTipo as character
    local nRDHoras as numeric
    if (empty(cRDPD))
        cRDPD:=SRDGetValue("RD_PD","")
    endif
    if (SRDFindSRVPD(cRDPD))
        cRVTipo:=SRV->RV_TIPO
    endif
    if (empty(cRVTipo))
        cRVTipo:="V"
    else
        nRDHoras:=SRDGetValue("RD_HORAS",0)
        if ((cRVTipo$"H|D").and.(empty(nRDHoras)))
            cRVTipo:="V"
        elseif (cRVTipo=="D").and.((nRDHoras-Int(nRDHoras))>0)
            cRVTipo:="H"
        endif
    endif
return(cRVTipo)

static function SRDGetSEQ() as character

    static c_stHMSRDSeqKey as character

    local cStack:="SRDIMPORTDATA" as character

    local cRDSEQ:="" as character

    local cHMSRDSeqKey:="" as character
    local cHMSRDKeepKey:="" as character

    local cTmpAlias as character

    local lSoma1:=.T. as logical

    begin sequence

        if (type("cPVTSRDAlias")!="C")
            _SetNamedPRVT("cPVTSRDAlias",SRDGetValue("importSRDAlias","__NOALIAS__"),cStack)
        endif

        cTmpAlias:=cPVTSRDAlias
        if (select(cTmpAlias)==0)
            break
        endif

        cHMSRDKeepKey:=&("cEmpAnt")
        cHMSRDKeepKey+=SRDGetValue("RD_FILIAL")
        cHMSRDKeepKey+=SRDGetValue("RD_MAT")
        cHMSRDKeepKey+=SRDGetValue("RD_DATARQ")
        cHMSRDKeepKey+=SRDGetValue("RD_ROTEIR")
        cHMSRDKeepKey+=SRDGetValue("RD_PROCES")

        if (type("oPVTHMSRDSeq")!="O")
            _SetNamedPRVT("oPVTHMSRDSeq",THashMap():New(),cStack)
        endif

        if (c_stHMSRDSeqKey!=cHMSRDKeepKey)
            c_stHMSRDSeqKey:=cHMSRDKeepKey
            oPVTHMSRDSeq:Clean()
        endif

        cHMSRDSeqKey:=&("cEmpAnt")
        cHMSRDSeqKey+=SRDGetValue("RD_DATARQ")
        cHMSRDSeqKey+=SRDGetValue("RD_FILIAL")
        cHMSRDSeqKey+=SRDGetValue("RD_MAT")
        cHMSRDSeqKey+=SRDGetValue("RD_CC")
        cHMSRDSeqKey+=SRDGetValue("RD_PROCES")
        cHMSRDSeqKey+=SRDGetValue("RD_ROTEIR")
        cHMSRDSeqKey+=SRDGetValue("RD_SEMANA")
        cHMSRDSeqKey+=SRDGetValue("RD_PD")

        if (!oPVTHMSRDSeq:Get(cHMSRDSeqKey,@cRDSEQ)).or.(Empty(cRDSEQ))
            if (type("nPVTSRDSeq")!="N")
                _SetNamedPRVT("nPVTSRDSeq",GetSx3Cache("RD_SEQ","X3_TAMANHO"),cStack)
                cRDSEQ:=Replicate("0",nPVTSRDSeq)
                _SetNamedPRVT("cPVTRDSEQ",cRDSEQ,cStack)
            endif
            cRDSEQ:=cPVTRDSEQ
            lSoma1:=(strTran(cRDSEQ,"0","")!="")
        endif

        if (lSoma1)
            cRDSEQ:=__Soma1(cRDSEQ)
        endif

        oPVTHMSRDSeq:Set(cHMSRDSeqKey,cRDSEQ)

    end sequence

return(cRDSEQ)

static function SRDFindSRVPD(cRDPD as character) as logical

    static c_stHMFindSRVPDKey as character

    local cStack:="SRDIMPORTDATA"

    local cSRVFilial as character
    local cSRVKeySeek as character

    local cHMFindSRVPDKey as character

    local lSRVFound as logical

    local nSRVOrder as numeric
    local nSRVRecNo as numeric

    cSRVFilial:=fFilFunc("SRV")

    cSRVKeySeek:=cSRVFilial
    cSRVKeySeek+=cRDPD

    cHMFindSRVPDKey:=&("cEmpAnt")
    cHMFindSRVPDKey+=cSRVFilial

    if (type("oPVTHMFindSRVPD")!="O")
        _SetNamedPRVT("oPVTHMFindSRVPD",THashMap():New(),cStack)
    endif

    if (c_stHMFindSRVPDKey!=cHMFindSRVPDKey)
        c_stHMFindSRVPDKey:=cHMFindSRVPDKey
        oPVTHMFindSRVPD:Clean()
    endif

    if (!oPVTHMFindSRVPD:Get(cSRVKeySeek,@nSRVRecNo))
        nSRVOrder:=RetOrder("SRV","RV_FILIAL+RV_COD")
        SRV->(dbSetOrder(nSRVOrder))
        lSRVFound:=SRV->(MsSeek(cSRVKeySeek,.F.))
        if (lSRVFound)
            nSRVRecNo:=SRV->(RecNo())
        else
            nSRVRecNo:=0
        endif
        oPVTHMFindSRVPD:Set(cSRVKeySeek,nSRVRecNo)
    else
        lSRVFound:=(nSRVRecNo>0)
        if (lSRVFound)
            SRV->(MsGoTo(nSRVRecNo))
        else
            PutfileInEof("SRV")
        endif
    endif

return(lSRVFound)

static function SRDGetSRVPD(cEventoDataSul as character,oTFIni as object) as character

    local cRDPD as character
    local cTable as character
    local cDatarq as character
    local cRoteiro as character
    local cFindInTable as character
    local cCutsomTable as character

    local cTReportGrp as character
    local cTReportMsg as character

    local lSRVFound as logical
    local lFindInCustomTable as logical

    local nSRDPD:=getSX3Cache("RD_PD","X3_TAMANHO")

    local oTLogReport as object

    cRoteiro:=SRDGetValue("RD_ROTEIR","")
    cDatarq:=SRDGetValue("RD_DATARQ","")

    cTable:="TabelaVerbasSRV"
    if (!empty(cRoteiro))
        cCutsomTable:=(cTable+cRoteiro)
        lFindInCustomTable:=oTFIni:ExistSection(cCutsomTable)
        if ((lFindInCustomTable).and.(cRoteiro=="FOL").and.!empty(cDatarq))
            lFindInCustomTable:=(;
                (Right(cDatarq,2)=="12");
                .and.;
                (Left(DTOS(SRA->RA_DEMISSA),6)!=cDatarq);
            )
        endif
        if (lFindInCustomTable)
            cFindInTable:=datasul2totvs.findInTable(oTFIni,cCutsomTable,cEventoDataSul,.T.,.T.)
        endif
    endif

    if (empty(cFindInTable))
        cFindInTable:=datasul2totvs.findInTable(oTFIni,cTable,cEventoDataSul,.T.,.T.)
    endif

    cRDPD:=Left(cFindInTable,nSRDPD)

    if (!Empty(cRDPD))

        lSRVFound:=SRDFindSRVPD(cRDPD)

        if (!lSRVFound)
            oTLogReport:=SRDGetValue("SRDImportDataLogReport",nil)
            if (valType(oTLogReport)=="O")
                cTReportGrp:=cTools():Accentuation("[Verba N#1o Localizada na tabela SRV]:","atilde")
                cTReportMsg:="Verba ["+cRDPD+"]. Evento ["+cFindInTable+"]."
                oTLogReport:AddGroup(cTReportGrp)
                if (oTLogReport:FindDetail(cTReportGrp,cTReportMsg)==0)
                    oTLogReport:AddDetail(cTReportGrp,cTReportMsg)
                endif
            endif
            cRDPD:=Space(nSRDPD)
        endif

    elseif (!empty(cEventoDataSul))

        oTLogReport:=SRDGetValue("SRDImportDataLogReport",nil)
        if (valType(oTLogReport)=="O")
            cTReportGrp:=cTools():Accentuation("[De/Para N#1o Localizado]:","atilde")
            cTReportMsg:=cTools():Accentuation("N#1o Existe paridade de Verba Protheus para o Evento Datasul [","atilde")
            cTReportMsg+=if(Empty(cFindInTable),cEventoDataSul,cFindInTable)+"]."
            oTLogReport:AddGroup(cTReportGrp)
            if (oTLogReport:FindDetail(cTReportGrp,cTReportMsg)==0)
               oTLogReport:AddDetail(cTReportGrp,cTReportMsg)
            endif
        endif

    endif

return(cRDPD)

static function SRDSourceFilter(aLine as array,oTFIni as object,cCompetenciaDe as character,cCompetenciaAte as character,cMatDe as character,cMatAte as character,nSizeMat as numeric,cAnoDe as character,cAnoAte as character,cFilDe as character,cFilAte as character) as logical

    local lFilter:=.T. as logical

    local xFilter as variant

    begin sequence
        if (empty(aLine).or.(Len(aLine)<5))
            break
        endif
        xFilter:=strTran(aLine[1],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaEmpresas",xFilter,.T.,.T.)
        lFilter:=(xFilter==cEmpAnt)
        if (!lFilter)
            break
        endif
        xFilter:=aLine[4]
        lFilter:=((xFilter>=cAnoDe).and.(xFilter<=cAnoAte))
        if (!lFilter)
            break
        endif
        xFilter:=(xFilter+PadL(aLine[5],2,"0"))
        lFilter:=((xFilter>=cCompetenciaDe).and.(xFilter<=cCompetenciaAte))
        if (!lFilter)
            break
        endif
        xFilter:=PadL(aLine[3],nSizeMat,"0")
        lFilter:=((xFilter>=cMatDe).and.(xFilter<=cMatAte))
        if (!lFilter)
            break
        endif
        xFilter:=strTran(aLine[2],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaFiliais",xFilter,.T.,.T.)
        lFilter:=((xFilter>=cFilDe).and.(xFilter<=cFilAte))
        if (!lFilter)
            break
        endif
    end sequence

return(lFilter)
