#include "totvs.ch"

#include "tlpp-core.th"

namespace dna.tech.DataSul2Protheus

using namespace dna.tech
using namespace dna.tech.DataSul2Protheus

#include "execin.th"
EXECIN CLASS SR8Import

static function SR8GetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SR8SetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SR8ImportData(oMsNewProcess as object,lEnd as logical,lPercentage as logical) as logical

    local aAddIndex as array

    local bSourceSetFilter as codeblock

    local cAlias:="SR8" as character
    local cIndexKey as character
    local cTableImport:="SR8" as character

    local lSR8Import as logical

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oTLogReport:=tLogReport():New() as object

    cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","R8_FILIAL+R8_MAT+DTOS(R8_DATAINI)+R8_TIPO"))
    aAddIndex:=cTools():StrTokArray(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","R8_FILIAL,R8_MAT,R8_DATAINI,R8_TIPO,R8_TIPOAFA")),",")

    bSourceSetFilter:={|jJSOnLine|SR8SourceFilter(jJSOnLine,oTFIni)}
    cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)

    lSR8Import:=dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)

    if (lSR8Import)
        ApMsgInfo(cAlias+" Table Import Completed","Info")
    else
        ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
    endif

    oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
    MsAguarde({||oTLogReport:FreeObj()},"Releasing temporary files and workspace memory...","Wait...")
    FreeObj(@oTLogReport)

    FWFreeArray(@aAddIndex)

    if (type("oPVTHMSR8Seq")=="O")
        oPVTHMSR8Seq:Clean()
        FreeObj(@oPVTHMSR8Seq)
    endif

    DelClassIntF()

return(lSR8Import)

static function SR8GetSEQ() as character

    static c_stHMSR8SeqKey as character

    local cStack:="DNA.TECH.DATASUL2PROTHEUS.SR8IMPORTDATA" as character

    local cR8MAT as character
    local cR8SEQ:="" as character
    local cR8TIPO as character
    local cR8FILIAL as character
    local cR8DATAINI as character
    local cR8TIPOAFA as character

    local cHMSR8SeqKey:="" as character

    local cTmpAlias as character

    local dR8DATAINI as date

    begin sequence

        if (type("cPVTSR8Alias")!="C")
            _SetNamedPRVT("cPVTSR8Alias",SR8GetValue("importSR8Alias","__NOALIAS__"),cStack)
        endif

        cTmpAlias:=cPVTSR8Alias
        if (select(cTmpAlias)==0)
            break
        endif

        cR8FILIAL:=(cTmpAlias)->R8_FILIAL
        cR8MAT:=(cTmpAlias)->R8_MAT
        dR8DATAINI:=(cTmpAlias)->R8_DATAINI
        cR8TIPO:=(cTmpAlias)->R8_TIPO
        cR8TIPOAFA:=(cTmpAlias)->R8_TIPOAFA

        cR8DATAINI:=DToS(dR8DATAINI)

        cHMSR8SeqKey:=&("cEmpAnt")
        cHMSR8SeqKey+=cR8FILIAL
        cHMSR8SeqKey+=cR8MAT

        if (type("oPVTHMSR8Seq")!="O")
            _SetNamedPRVT("oPVTHMSR8Seq",THashMap():New(),cStack)
        endif

        if (c_stHMSR8SeqKey!=cHMSR8SeqKey)
            c_stHMSR8SeqKey:=cHMSR8SeqKey
            oPVTHMSR8Seq:Clean()
        endif

        cHMSR8SeqKey+=cR8DATAINI
        cHMSR8SeqKey+=cR8TIPO
        cHMSR8SeqKey+=cR8TIPOAFA

        if (!oPVTHMSR8Seq:Get(cHMSR8SeqKey,@cR8SEQ)).or.(Empty(cR8SEQ))
            if (type("nPVTSR8Seq")!="N")
                _SetNamedPRVT("nPVTSR8Seq",GetSx3Cache("R8_SEQ","X3_TAMANHO"),cStack)
                cR8SEQ:=Replicate("0",nPVTSR8Seq)
                _SetNamedPRVT("cPVTR8SEQ",cR8SEQ,cStack)
            endif
            cR8SEQ:=cPVTR8SEQ
        endif

        cR8SEQ:=__Soma1(cR8SEQ)

        oPVTHMSR8Seq:Set(cHMSR8SeqKey,cR8SEQ)

    end sequence

return(cR8SEQ)

static function SR8SourceFilter(jJSOnLine as json,oTFIni as object) as logical

    local aLine:=jJSOnLine["uLine"] as array

    local lFilter:=.T. as logical

    local xFilter as variant

    begin sequence
        lFilter:=(Len(aLine)>=2)
        if (!lFilter)
            break
        endif
        xFilter:=strTran(aLine[1],'"',"")
        xFilter:=dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.findInTable",oTFIni,"TabelaEmpresas",xFilter,.T.,.T.)
        lFilter:=(xFilter==cEmpAnt)
        if (!lFilter)
            break
        endif
        xFilter:=aLine[2]
        xFilter:=strTran(aLine[2],'"',"")
        xFilter:=dna.tech.DataSul2Protheus.datasul2totvs():Execute("dna.tech.DataSul2Protheus.findInTable",oTFIni,"TabelaFiliais",xFilter,.T.,.T.)
        lFilter:=(!empty(xFilter))
    end sequence

return(lFilter)
