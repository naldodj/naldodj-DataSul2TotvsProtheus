#define __NToS

#include "totvs.ch"
#include "dbstruct.ch"

#include "jsonhash.ch"
#include "jsonarray.ch"

static st_oHMbTransform:=THashMap():New() as object

//datasul2totvs.Protheus():Activate()
namespace datasul2totvs

class Protheus
    static method Activate() as logical
end class

static method Activate() class Protheus

    local bMsNewProcess as codeblock
    
    local cGetFileMask as character
    local cGetFileTitle as character

    local lActivate as logical

    local nGetFileOptions as numeric

    local oDlg as object
    local oMenu as object
    local oFont as object
    local oFWDefSize as object
    local oMSNewProcess as object

    if (valType(st_oHMbTransform)=="O")
        st_oHMbTransform:Clean()
    endif

    oFont:=TFont():New("Courier New",nil,16,nil,.T.)
    bMsNewProcess:={|lEnd|ProcRedefine(cacheHMData():Get("ImportSRF"),@oFont,0,600,600,.T.,.T.),ImportSRF(cacheHMData():Get("ImportSRF"),@lEnd)}
    oMSNewProcess:=MsNewProcess():New(bMsNewProcess,"Importing SRF :: ["+DToC(Date())+"]["+Time()+"]","Wait!",.T.)
    cacheHMData():Set("ImportSRF",oMSNewProcess)

    bMsNewProcess:={|lEnd|ProcRedefine(cacheHMData():Get("ImportSR8"),@oFont,0,600,600,.T.,.T.),ImportSR8(cacheHMData():Get("ImportSR8"),@lEnd)}
    oMSNewProcess:=MsNewProcess():New(bMsNewProcess,"Importing SR8 :: ["+DToC(Date())+"]["+Time()+"]","Wait!",.T.)
    cacheHMData():Set("ImportSR8",oMSNewProcess)

    begin sequence

        cGetFileMask:="Arquivo de Configuração | DataSul2Protheus.ini"
        cGetFileTitle:="Arquivo de Configuração DataSul2Protheus.ini"
        nGetFileOptions:=(GETF_LOCALHARD+GETF_NETWORKDRIVE)
        cINIfile:=cGetFile(cGetFileMask,cGetFileTitle,1,".\",.F.,nGetFileOptions,/*[lArvore]*/,/*[lKeepCase]*/)

        MsAguarde({||lActivate:=readIniFile(@cINIfile)},"Loading Settings","Wait")
        if (!lActivate)
            break
        endif

        MsAguarde({||lActivate:=readTableDefinition()},"Loading structure of tables","Wait")
        if (!lActivate)
            break
        endif

        oFWDefSize:=FWDefSize():New(.T.,.T.)//Sem enchoicebar
        oFWDefSize:lLateral:=.F.//Calculo vertical
        oFWDefSize:AddObject("TMENU",100,100,.T.,.T.)//TMENU

        oFWDefSize:Process()

        nTop:=oFWDefSize:aWindSize[1]
        nLeft:=oFWDefSize:aWindSize[2]
        nBottom:=oFWDefSize:aWindSize[3]
        nRight:=oFWDefSize:aWindSize[4]

        DEFINE MSDIALOG oDlg TITLE "TOTVS :: DataSul To Protheus" FROM nTop,nLeft TO nBottom,nRight PIXEL OF getWNDDefault()

            MENU oMenu IMAGE "" OF oDlg
                MENUITEM "TOTVS :: DataSul To Protheus"
                MENU
                    MENUITEM "Import SRF" ACTION (oMSNewProcess:=cacheHMData():Get("ImportSRF"),oMSNewProcess:Activate())
                    MENUITEM "Import SR8" ACTION (oMSNewProcess:=cacheHMData():Get("ImportSR8"),oMSNewProcess:Activate())
                ENDMENU
                MENU
                    MENUITEM "Exit" ACTION oDlg:End()
                ENDMENU
            ENDMENU

            oMenu:align:=CONTROL_ALIGN_LEFT
            oDlg:SetMenu(oMenu)

        ACTIVATE DIALOG oDlg CENTERED

    end sequence

    oFont:=FreeObj(oFont)
    oMenu:=FreeObj(oMenu)
    oDlg:=FreeObj(oDlg)

    oMSNewProcess:=FreeObj(oMSNewProcess)

    cacheData():delSection("datasul2totvs")

    cacheHMData():Set("ImportSRF",FreeObj(cacheHMData():Get("ImportSRF")))
    cacheHMData():Set("ImportSRF",FreeObj(cacheHMData():Get("ImportSR8")))

    cacheHMData():Del("ImportSRF")
    cacheHMData():Del("ImportSR8")

    if (valType(st_oHMbTransform)=="O")
        st_oHMbTransform:Clean()
    endif

return(lActivate)

static function readIniFile(cINIfile as character) as logical

    local cRootPath as character

    local cSPPDrive as character
    local cSPPPath as character
    local cSPPFile as character
    local cSPPExt as character

    local lreadIniFile:=.F. as logical

    local oTFIni as object

    begin sequence

        lreadIniFile:=(!empty(cINIfile).and.(File(cINIfile)))
        if (!lreadIniFile)
            ApMsgAlert("Configuration file invalid or not found","Attention")
            break
        endif

        SplitPath(cINIfile,@cSPPDrive,@cSPPPath,@cSPPFile,@cSPPExt)

        cRootPath:=cSPPDrive
        cRootPath+=cSPPPath

        cacheData():Set("datasul2totvs","cRootPath",cRootPath)

        oTFIni:=TFIni():New(cINIfile,";")

        cacheData():Set("datasul2totvs","readIniFile",oTFIni)

    end sequence

return(lreadIniFile)

static function readTableDefinition() as logical

    local aFieldDef as array
    local aFieldDefTmp as array
    local aFieldsDef:=array(0) as array
    local aTablesImport as array

    local cLine as character
    local cLineUTF8 as character
    
    local cTable as character
    local cRootPath as character
    local cTablesDefinition as character
    local cFileTablesDefinition as character

    local nft_fRecNo as numeric
    local nft_fHandle as numeric

    local lSkipTable:=.F. as logical
    local lreadTableDefinition:=.F. as logical

    local oFT as object
    local oTFIni as object
    local oHMTablesImport as object

    begin sequence

        oTFIni:=cacheData():Get("datasul2totvs","readIniFile")

        aTablesImport:=aClone(oTFIni:GetAllProperties("TablesImport"))
        lreadTableDefinition:=(!empty(aTablesImport))
        if (!lreadTableDefinition)
            ApMsgAlert("Invalid import tables","Attention")
            break
        endif

        cTablesDefinition:=allTrim(oTFIni:GetPropertyValue("Tables","TablesDefinition",""))
        lreadTableDefinition:=(!empty(cTablesDefinition))
        if (!lreadTableDefinition)
            ApMsgAlert("Invalid TablesDefinition","Attention")
            break
        endif

        cRootPath:=cacheData():Get("datasul2totvs","cRootPath")
        cFileTablesDefinition:=(cRootPath+".."+cTablesDefinition)
        lreadTableDefinition:=file(cFileTablesDefinition)
        if (!lreadTableDefinition)
            ApMsgAlert("File ("+cFileTablesDefinition+") with the definitions of the tables not found","Attention")
            break
        endif

        oFT:=uft():New()

        nft_fHandle:=oFT:ft_fUse(cFileTablesDefinition)
        lreadTableDefinition:=(nft_fHandle>=0)
        if (!lreadTableDefinition)
            ApMsgAlert("Could not open the file: "+cFileTablesDefinition,"Attention")
            break
        endif

        oHMTablesImport:=aToHM(aTablesImport,2)

        oFT:ft_fGoTop()

        while (!oFT:ft_fEof())
            cLine:=oFT:ft_fReadLN()
            begin sequence
                if (empty(cLine))
                    break
                endif
                cTable:=""
                if ("Table:"==Left(cLine,6))
                    cTable:=strTran(cLine,"Table:","")
                    cTable:=allTrim(cTable)
                    lSkipTable:=(!oHMTablesImport:Get(cTable))
                    if (lSkipTable)
                        break
                    else
                        oFT:ft_fDelete()
                        oFT:ft_fSkip()
                    endif
                    aSize(aFieldsDef,0)
                    while (!oFT:ft_fEof())
                        cLine:=oFT:ft_fReadLN()
                        if (empty(cLine).or.("Field Name"==Left(cLine,10)).or.("-"==Left(cLine,1)))
                            oFT:ft_fDelete()
                            oFT:ft_fSkip()
                            loop
                        endif
                        if ("Table:"==Left(cLine,6))
                            cacheData():Set("datasul2totvs",cTable,aClone(aFieldsDef))
                            aSize(aFieldsDef,0)
                            nft_fRecNo:=oFT:ft_fRecNo()
                            oFT:ft_fGoTo(nft_fRecNo-1)
                            break
                        endif
                        while ("  "$cLine)
                            cLine:=strTran(cLine,"  "," ")
                        end while
                        cLineUTF8:=DecodeUTF8(cLine)
                        if (empty(cLineUTF8))
                            cLine:=cLineUTF8
                        endif
                        aFieldDef:=strTokArr2(cLine," ")
                        cLine:=""
                        if (len(aFieldDef)==3)
                            aFieldDefTmp:=array(4)
                            aFieldDefTmp[1]:=aFieldDef[1]
                            aFieldDefTmp[2]:=aFieldDef[2]
                            aFieldDefTmp[3]:=""
                            aFieldDefTmp[4]:=aFieldDef[3]
                            aFieldDef:=aClone(aFieldDefTmp)
                            FWFreeArray(@aFieldDefTmp)
                        endif
                        aAdd(aFieldsDef,aClone(aFieldDef))
                        FWFreeArray(@aFieldDef)
                        oFT:ft_fDelete()
                        oFT:ft_fSkip()
                    end while
                    cacheData():Set("datasul2totvs",cTable,aClone(aFieldsDef))
                    aSize(aFieldsDef,0)
                elseif (lSkipTable)
                    break
                endif
            end sequence
            oFT:ft_fDelete()
            oFT:ft_fSkip()
        end while

        oFT:ft_fUse()
        oFT:=FreeObj(oFT)

    end sequence
    
    FWFreeArray(@aFieldsDef)

    if (valtype(oHMTablesImport)=="O")
        oHMTablesImport:Clean()
        oHMTablesImport:=FreeObj(oHMTablesImport)
    endif
    
    if (valtype(aTablesImport)=="A")
        FWFreeArray(@aTablesImport)
    endif

return(lreadTableDefinition)

static function importSRF(oMsNewProcess as object,lEnd as logical) as logical

    local aLog:=array(0) as array
    local aLogDet:=array(0) as array
    local aLogTitle:=array(0) as array

    local aLine as array
    local aFieldsDef:=array(0) as array
    local aSRFStruct:=SRF->(dbStruct()) as array
    local aSRFFieldsDef as array

    local cField as character
    local cLineUTF8 as character

    local cAlias:=getNextAlias() as character
    local cLine as character
    local cSRFFile as character
    local cSRFTable as character
    local cRootPath as character
    local cDataPath as character

    local cRecCount as character

    local cSRFIndexID as character
    local cSRFIndexKey:="RF_FILIAL+RF_MAT+DTOS(RF_DATABAS)+RF_PD" as character

    local cIncProc as character
    local cTimeRemaining as character

    local lFound as logical
    local lAddNew as logical
    local ldbCommit as logical
    local lImportSRF as logical

    local nField as numeric
    local nFields as numeric

    local nRecProc:=0 as numeric
    local nRecCount as numeric
    local nRecCount100 as numeric
    local nCommitBuffer as numeric

    local nSRFIndexKey:=retOrder("SRF",cSRFIndexKey) as numeric

    local nft_fRecNo as numeric
    local nft_fHandle as numeric

    local oFT as object
    local oTFIni as object
    local oProgress as object
    local oHMSRFStruct as object
    local oTimeRemaining as object
    local oFWTemporaryTable as object

    begin sequence

        oTFIni:=cacheData():Get("datasul2totvs","readIniFile")

        cSRFTable:=allTrim(oTFIni:GetPropertyValue("TablesImport","SRF",""))
        lImportSRF:=(!empty(cSRFTable))
        if (!lImportSRF)
            ApMsgAlert("There is no setting for the SRF table","Attention")
            break
        endif

        cDataPath:=allTrim(oTFIni:GetPropertyValue("Tables","TablesData",""))
        lImportSRF:=(!empty(cDataPath))
        if (!lImportSRF)
            ApMsgAlert("Invalida Data Path ("+cDataPath+")","Attention")
            break
        endif

        cRootPath:=cacheData():Get("datasul2totvs","cRootPath")
        cSRFFile:=(cRootPath+".."+cDataPath+cSRFTable+".csv")
        lImportSRF:=file(cSRFFile)
        if (!lImportSRF)
            ApMsgAlert("File ("+cSRFFile+") not found","Attention")
            break
        endif

        aFieldsDef:=aClone(cacheData():Get("datasul2totvs",cSRFTable,aFieldsDef))
        lImportSRF:=(!empty(aFieldsDef))
        if (!lImportSRF)
            ApMsgAlert("Field definitions for the "+cSRFTable+" table not found","Attention")
            break
        endif

        aSRFFieldsDef:=aClone(oTFIni:GetAllProperties(cSRFTable))
        lImportSRF:=(!empty(aFieldsDef))
        if (!lImportSRF)
            ApMsgAlert("Field definitions for the SRF table not found","Attention")
            break
        endif

        oHMSRFStruct:=aToHM(aSRFStruct,DBS_NAME)

        nFields:=Len(aSRFFieldsDef)
        for nField:=1 to nFields
            cField:=Upper(aSRFFieldsDef[nField][1])
            aSRFFieldsDef[nField][1]:=cField
            if (oHMSRFStruct:Get(cField))
                nSRFFieldPos:=aScan(aSRFStruct,{|x|(x[DBS_NAME]==cField)})
            else
                nSRFFieldPos:=0
            endif
            aAdd(aSRFFieldsDef[nField],nSRFFieldPos)
        next nField

        oHMSRFStruct:Clean()
        oHMSRFStruct:=FreeObj(oHMSRFStruct)

        oFT:=uft():New()

        MsAguarde({||nft_fHandle:=oFT:ft_fUse(cSRFFile)},"Loading Data File","Wait")
        lImportSRF:=(nft_fHandle>=0)
        if (!lImportSRF)
            ApMsgAlert("Could not open the file: "+cSRFFile,"Attention")
            break
        endif

        begin sequence

            oFWTemporaryTable:=FWTemporaryTable():New(@cAlias,@aSRFStruct)
            oFWTemporaryTable:AddIndex("01",{"RF_FILIAL","RF_MAT","RF_DATABAS","RF_PD"})
            oFWTemporaryTable:Create()

            FWFreeArray(@aSRFStruct)

            cacheData():Set("datasul2totvs","importSRFAlias",cAlias)
            cacheData():Set("datasul2totvs","importSRFTable",oFWTemporaryTable:getRealName())

            nRecCount:=oFT:ft_fLastRec()
            cRecCount:=cTools():NToS(nRecCount)
            nRecCount100:=if(nRecCount>=1000,Int(nRecCount/100),nRecCount)
            oMsNewProcess:SetRegua1(nRecCount100)
            oMsNewProcess:SetRegua2(0)
            oTimeRemaining:=timeRemaining():New(nRecCount)

            oProgress:=txtProgress():New()

            TCSrvMap(cAlias,nil,.F.)

            oFT:ft_fGoTop()
            while (!oFT:ft_fEof())
                nft_fRecNo:=oFT:ft_fRecNo()
                cLine:=oFT:ft_fReadLN()
                oFT:ft_fDelete()
                if (empty(cLine))
                    oFT:ft_fSkip()
                    loop
                endif
                cLineUTF8:=DecodeUTF8(cLine)
                if (empty(cLineUTF8))
                    cLine:=cLineUTF8
                    aAdd(aLogTitle,"foram Encontradas inconsistencias na linha ["+cTools():NToS(nft_fRecNo)+"]")
                    aAdd(aLog,cLine)
                    aAdd(aLog,"Existem Caracteres Invalidos")
                    aAdd(aLogDet,aClone(aLog))
                    aSize(aLog,0)
                endif
                aLine:=strTokArr2(cLine,";")
                cLine:=""
                (cAlias)->(dbAppend(.F.))
                    for nField:=1 to nFields
                        nSRFFieldPos:=aSRFFieldsDef[nField][Len(aSRFFieldsDef[nField])]
                        if (nSRFFieldPos==0)
                            loop
                        endif
                        cField:=aSRFFieldsDef[nField][1]
                        xValue:=(cAlias)->(getTargetFieldValue(@oTFIni,@aLine,@cField,aSRFFieldsDef[nField],@aFieldsDef))
                        if (empty(xValue))
                            loop
                        endif
                        (cAlias)->(FieldPut(nSRFFieldPos,xValue))
                    next nField
                ldbCommit:=(++nCommitBuffer>=1024)
                FWFreeArray(@aLine)
                oTimeRemaining:Calcule(.T.)
                nRecProc++
                if ((Mod(nRecProc,100)==0).or.(nRecProc>=nRecCount))
                    cTimeRemaining:=" :: End of processing in ["+DtoC(oTimeRemaining:GetdEndTime())+"]"
                    cTimeRemaining+="["+oTimeRemaining:GetcEndTime()+"]"
                    cTimeRemaining+=" :: ["+oTimeRemaining:GetcAverageTime()+"]"
                    cIncProc:="["+oProgress:Eval()+"] "
                    cIncProc+="Processing Record: "
                    cIncProc+=cTools():NToS(nft_fRecNo)
                    cIncProc+="/"
                    cIncProc+=cRecCount
                    cIncProc+=cTimeRemaining
                    cIncProc+=" :: ["+cTools():NToS(nRecProc/nRecCount100)+"%]"
                    oMsNewProcess:IncRegua1(cIncProc)
                endif
                lEnd:=oMsNewProcess:lEnd
                if (lEnd)
                    aAdd(aLogTitle,"Process canceled by user")
                    aAdd(aLog,"Process canceled by user ["+DtoC(Date())+"]["+Time()+"]")
                    aAdd(aLogDet,aClone(aLog))
                    aSize(aLog,0)
                    exit
                endif
                if (ldbCommit)
                    nCommitBuffer:=0
                    (cAlias)->(dbCommitAll())
                endif
                oFT:ft_fSkip()
            end while

            if (nCommitBuffer>0)
                (cAlias)->(dbCommitAll())
            endif

            oFT:ft_fUse()

            if (lEnd)
                break
            endif

            nRecCount:=(cAlias)->(recCount())
            cRecCount:=cTools():NToS(nRecCount)
            nRecCount100:=Int(nRecCount/100)
            oMsNewProcess:SetRegua2(nRecCount100)
            oTimeRemaining:SetRemaining(nRecCount)

            SRF->(dbSetOrder(nSRFIndexKey))

            nRecProc:=0

            (cAlias)->(dbGoTop())
            while (cAlias)->(!eof())
                cSRFIndexID:=(cAlias)->(&(cSRFIndexKey))
                lFound:=SRF->(dbSeek(cSRFIndexID,.F.))
                lAddNew:=(!lFound)
                if (SRF->(recLock("SRF",lAddNew)))
                    for nField:=1 to nFields
                        nSRFFieldPos:=aSRFFieldsDef[nField][Len(aSRFFieldsDef[nField])]
                        if (nSRFFieldPos==0)
                            loop
                        endif
                        xValue:=(cAlias)->(FieldGet(nSRFFieldPos))
                        if (empty(xValue))
                            loop
                        endif
                        SRF->(FieldPut(nSRFFieldPos,xValue))
                    next nField
                    SRF->(msUnLock())
                endif
                oTimeRemaining:Calcule(.T.)
                nRecProc++
                if ((Mod(nRecProc,100)==0).or.(nRecProc>=nRecCount))
                    cTimeRemaining:=" :: End of processing in ["+DtoC(oTimeRemaining:GetdEndTime())+"]"
                    cTimeRemaining+="["+oTimeRemaining:GetcEndTime()+"]"
                    cTimeRemaining+=" :: ["+oTimeRemaining:GetcAverageTime()+"]"
                    cIncProc:="["+oProgress:Eval()+"] "
                    cIncProc+="Updating Record: "
                    cIncProc+=cTools():NToS((cAlias)->(recNo()))
                    cIncProc+="/"
                    cIncProc+=cRecCount
                    cIncProc+=cTimeRemaining
                    cIncProc+=" :: ["+cTools():NToS(nRecProc/nRecCount100)+"%]"
                    oMsNewProcess:IncRegua2(cIncProc)
                endif                    
                lEnd:=oMsNewProcess:lEnd
                if (lEnd)
                    aAdd(aLogTitle,"Process canceled by user")
                    aAdd(aLog,"Process canceled by user ["+DtoC(Date())+"]["+Time()+"]")
                    aAdd(aLogDet,aClone(aLog))
                    aSize(aLog,0)
                    break
                endif
                (cAlias)->(dbSkip())
            end while

        end sequence

        (cAlias)->(dbCloseArea())

        oFWTemporaryTable:Delete()
        oFWTemporaryTable:=FreeObj(oFWTemporaryTable)

    end sequence

    if (valType(aSRFStruct)=="A")
        FWFreeArray(@aSRFStruct)
    endif

    if (valType(aFieldsDef)=="A")
        FWFreeArray(@aFieldsDef)
    endif

    if (valType(aSRFFieldsDef)=="A")
        FWFreeArray(@aSRFFieldsDef)
    endif

    if (lImportSRF)
        ApMsgInfo("SRF Table Import Completed","Info")
    endif

    if (!empty(aLogDet))
        fMakeLog(aLogDet,aLogTitle,nil,nil,ProcName(),"Log de Ocorrencias na Importacao","G","L",nil,.F.)
        FWFreeArray(@aLog)
        FWFreeArray(@aLogDet)
        FWFreeArray(@aLogTitle)
    endif

return(lImportSRF)

static function importSR8(oMsNewProcess as object,lEnd as logical) as logical

    local aLog:=array(0) as array
    local aLogDet:=array(0) as array
    local aLogTitle:=array(0) as array

    local aLine as array
    local aFieldsDef:=array(0) as array
    local aSR8Struct:=SR8->(dbStruct()) as array
    local aSR8FieldsDef as array

    local cLine as character
    local cLineUTF8 as character

    local cAlias:=getNextAlias() as character
    local cField as character
    local cSR8File as character
    local cSR8Table as character
    local cRootPath as character
    local cDataPath as character

    local cRecCount as character

    local cIncProc as character
    local cTimeRemaining as character

    local cSR8IndexID as character
    local cSR8IndexKey:="R8_FILIAL+R8_MAT+DTOS(R8_DATAINI)+R8_TIPO" as character

    local lFound as logical
    local lAddNew as logical
    local ldbCommit as logical
    local lImportSR8 as logical

    local nField as numeric
    local nFields as numeric

    local nRecProc:=0 as numeric
    local nRecCount as numeric
    local nRecCount100 as numeric
    local nCommitBuffer as numeric

    local nSR8IndexKey:=retOrder("SR8",cSR8IndexKey) as numeric

    local nft_fRecNo as numeric
    local nft_fHandle as numeric

    local oFT as object
    local oTFIni as object
    local oProgress as object
    local oHMSR8Struct as object
    local oTimeRemaining as object
    local oFWTemporaryTable as object

    begin sequence

        oTFIni:=cacheData():Get("datasul2totvs","readIniFile")

        cSR8Table:=allTrim(oTFIni:GetPropertyValue("TablesImport","SR8",""))
        lImportSR8:=(!empty(cSR8Table))
        if (!lImportSR8)
            ApMsgAlert("There is no setting for the SR8 table","Attention")
            break
        endif

        cDataPath:=allTrim(oTFIni:GetPropertyValue("Tables","TablesData",""))
        lImportSR8:=(!empty(cDataPath))
        if (!lImportSR8)
            ApMsgAlert("Invalida Data Path ("+cDataPath+")","Attention")
            break
        endif

        cRootPath:=cacheData():Get("datasul2totvs","cRootPath")
        cSR8File:=(cRootPath+".."+cDataPath+cSR8Table+".csv")
        lImportSR8:=file(cSR8File)
        if (!lImportSR8)
            ApMsgAlert("File ("+cSR8File+") not found","Attention")
            break
        endif

        aFieldsDef:=aClone(cacheData():Get("datasul2totvs",cSR8Table,aFieldsDef))
        lImportSR8:=(!empty(aFieldsDef))
        if (!lImportSR8)
            ApMsgAlert("Field definitions for the "+cSR8Table+" table not found","Attention")
            break
        endif

        aSR8FieldsDef:=aClone(oTFIni:GetAllProperties(cSR8Table))
        lImportSR8:=(!empty(aFieldsDef))
        if (!lImportSR8)
            ApMsgAlert("Field definitions for the SR8 table not found","Attention")
            break
        endif

        oHMSR8Struct:=aToHM(aSR8Struct,DBS_NAME)

        nFields:=Len(aSR8FieldsDef)
        for nField:=1 to nFields
            cField:=Upper(aSR8FieldsDef[nField][1])
            aSR8FieldsDef[nField][1]:=cField
            if (oHMSR8Struct:Get(cField))
                nSR8FieldPos:=aScan(aSR8Struct,{|x|(x[DBS_NAME]==cField)})
            else
                nSR8FieldPos:=0
            endif
            aAdd(aSR8FieldsDef[nField],nSR8FieldPos)
        next nField

        oHMSR8Struct:Clean()
        oHMSR8Struct:=FreeObj(oHMSR8Struct)

        oFT:=uft():New()

        MsAguarde({||nft_fHandle:=oFT:ft_fUse(cSR8File)},"Loading Data File","Wait")
        lImportSR8:=(nft_fHandle>=0)
        if (!lImportSR8)
            ApMsgAlert("Could not open the file: "+cSR8File,"Attention")
            break
        endif

        begin sequence
        
            oFWTemporaryTable:=FWTemporaryTable():New(@cAlias,@aSR8Struct)
            oFWTemporaryTable:AddIndex("01",{"R8_FILIAL","R8_MAT","R8_DATAINI","R8_TIPO","R8_TIPOAFA"})
            oFWTemporaryTable:Create()

            FWFreeArray(@aSR8Struct)

            cacheData():Set("datasul2totvs","importSR8Alias",cAlias)
            cacheData():Set("datasul2totvs","importSR8Table",oFWTemporaryTable:getRealName())

            nRecCount:=oFT:ft_fLastRec()
            cRecCount:=cTools():NToS(nRecCount)
            nRecCount100:=Int(nRecCount/100)
            oMsNewProcess:SetRegua1(nRecCount100)
            oMsNewProcess:SetRegua2(0)
            oTimeRemaining:=timeRemaining():New(nRecCount)

            oProgress:=txtProgress():New()

            TCSrvMap(cAlias,nil,.F.)

            oFT:ft_fGoTop()
            while (!oFT:ft_fEof())
                nft_fRecNo:=oFT:ft_fRecNo()
                cLine:=oFT:ft_fReadLN()
                oFT:ft_fDelete()
                if (empty(cLine))
                    oFT:ft_fSkip()
                    loop
                endif
                cLineUTF8:=DecodeUTF8(cLine)
                if (empty(cLineUTF8))
                    cLine:=cLineUTF8
                    aAdd(aLogTitle,"foram Encontradas inconsistencias na linha ["+cTools():NToS(nft_fRecNo)+"]")
                    aAdd(aLog,cLine)
                    aAdd(aLog,"Existem Caracteres Invalidos")
                    aAdd(aLogDet,aClone(aLog))
                    aSize(aLog,0)
                endif
                aLine:=strTokArr2(cLine,";")
                cLine:=""
                (cAlias)->(dbAppend(.F.))
                    for nField:=1 to nFields
                        nSR8FieldPos:=aSR8FieldsDef[nField][Len(aSR8FieldsDef[nField])]
                        if (nSR8FieldPos==0)
                            loop
                        endif
                        cField:=aSR8FieldsDef[nField][1]
                        xValue:=(cAlias)->(getTargetFieldValue(@oTFIni,@aLine,@cField,aSR8FieldsDef[nField],@aFieldsDef))
                        if (empty(xValue))
                            loop
                        endif
                        (cAlias)->(FieldPut(nSR8FieldPos,xValue))
                    next nField
                ldbCommit:=(++nCommitBuffer>=1024)
                FWFreeArray(@aLine)
                oTimeRemaining:Calcule(.T.)
                nRecProc++
                if ((Mod(nRecProc,100)==0).or.(nRecProc>=nRecCount))
                    cTimeRemaining:=" :: End of processing in ["+DtoC(oTimeRemaining:GetdEndTime())+"]"
                    cTimeRemaining+="["+oTimeRemaining:GetcEndTime()+"]"
                    cTimeRemaining+=" :: ["+oTimeRemaining:GetcAverageTime()+"]"
                    cIncProc:="["+oProgress:Eval()+"] "
                    cIncProc+="Processing Record: "
                    cIncProc+=cTools():NToS(nft_fRecNo)
                    cIncProc+="/"
                    cIncProc+=cRecCount
                    cIncProc+=cTimeRemaining
                    cIncProc+=" :: ["+cTools():NToS(nRecProc/nRecCount100)+"%]"
                    oMsNewProcess:IncRegua1(cIncProc)
                endif
                lEnd:=oMsNewProcess:lEnd
                if (lEnd)
                    aAdd(aLogTitle,"Process canceled by user")
                    aAdd(aLog,"Process canceled by user ["+DtoC(Date())+"]["+Time()+"]")
                    aAdd(aLogDet,aClone(aLog))
                    aSize(aLog,0)
                    exit
                endif
                if (ldbCommit)
                    nCommitBuffer:=0
                    (cAlias)->(dbCommitAll())
                endif
                oFT:ft_fSkip()
            end while

            if (nCommitBuffer>0)
                (cAlias)->(dbCommitAll())
            endif

            oFT:ft_fUse()

            if (lEnd)
                break
            endif

            nRecCount:=(cAlias)->(recCount())
            cRecCount:=cTools():NToS(nRecCount)
            nRecCount100:=Int(nRecCount/100)
            oMsNewProcess:SetRegua2(nRecCount100)
            oTimeRemaining:SetRemaining(nRecCount)

            SR8->(dbSetOrder(nSR8IndexKey))

            nRecProc:=0

            (cAlias)->(dbGoTop())
            while (cAlias)->(!eof())
                cSR8IndexID:=(cAlias)->(&(cSR8IndexKey))
                lFound:=SR8->(dbSeek(cSR8IndexID,.F.))
                lAddNew:=(!lFound)
                if (SR8->(recLock("SR8",lAddNew)))
                    for nField:=1 to nFields
                        nSR8FieldPos:=aSR8FieldsDef[nField][Len(aSR8FieldsDef[nField])]
                        if (nSR8FieldPos==0)
                            loop
                        endif
                        xValue:=(cAlias)->(FieldGet(nSR8FieldPos))
                        if (empty(xValue))
                            loop
                        endif
                        SR8->(FieldPut(nSR8FieldPos,xValue))
                    next nField
                    SR8->(msUnLock())
                endif
                oTimeRemaining:Calcule(.T.)
                nRecProc++
                if ((Mod(nRecProc,100)==0).or.(nRecProc>=nRecCount))
                    cTimeRemaining:=" :: End of processing in ["+DtoC(oTimeRemaining:GetdEndTime())+"]"
                    cTimeRemaining+="["+oTimeRemaining:GetcEndTime()+"]"
                    cTimeRemaining+=" :: ["+oTimeRemaining:GetcAverageTime()+"]"
                    cIncProc:="["+oProgress:Eval()+"] "
                    cIncProc+="Updating Record: "
                    cIncProc+=cTools():NToS((cAlias)->(recNo()))
                    cIncProc+="/"
                    cIncProc+=cRecCount
                    cIncProc+=cTimeRemaining
                    cIncProc+=" :: ["+cTools():NToS(nRecProc/nRecCount100)+"%]"
                    oMsNewProcess:IncRegua2(cIncProc)
                endif
                if (lEnd)
                    aAdd(aLogTitle,"Process canceled by user")
                    aAdd(aLog,"Process canceled by user ["+DtoC(Date())+"]["+Time()+"]")
                    aAdd(aLogDet,aClone(aLog))
                    aSize(aLog,0)
                    break
                endif
                (cAlias)->(dbSkip())
            end while

            (cAlias)->(dbCloseArea())

        end sequence

        oFWTemporaryTable:Delete()
        oFWTemporaryTable:=FreeObj(oFWTemporaryTable)

    end sequence

    if (type("oPVTHMSR8Seq")=="O")
        oPVTHMSR8Seq:Clean()
        oPVTHMSR8Seq:=FreeObj(oPVTHMSR8Seq)
    endif

    if (valType(aSR8Struct)=="A")
        FWFreeArray(@aSR8Struct)
    endif

    if (valType(aFieldsDef)=="A")
        FWFreeArray(@aFieldsDef)
    endif

    if (valType(aSR8FieldsDef)=="A")
        FWFreeArray(@aSR8FieldsDef)
    endif

    if (lImportSR8)
        ApMsgInfo("SR8 Table Import Completed","Info")
    endif

    if (!empty(aLogDet))
        fMakeLog(aLogDet,aLogTitle,nil,nil,ProcName(),"Log de Ocorrencias na Importacao","G","L",nil,.F.)
        FWFreeArray(@aLog)
        FWFreeArray(@aLogDet)
        FWFreeArray(@aLogTitle)
    endif

return(lImportSR8)

static function getTargetFieldValue(oTFIni as object,aLine as array,cTargetField as character,aTargetField as array,aSourceFieldsDef as array) as variant

    local aValueField as array
    local aSourceField as array

    local bTransform as codeblock

    local cType as character
    local cTransform as character
    local cSourceField as character

    local nSourceField as numeric
    local nSourceFields as numeric
    local nSourceFieldAT as numeric

    local oHMaSourceFieldsDef as object

    local xValue as variant

    oHMaSourceFieldsDef:=aToHM(aSourceFieldsDef)

    cSourceField:=aTargetField[2]
    aSourceField:=strToKArr2(cSourceField,"+")
    nSourceFields:=len(aSourceField)
    aValueField:=Array(nSourceFields,2)
    for nSourceField:=1 to nSourceFields
        cSourceField:=aSourceField[nSourceField]
        if (!oHMaSourceFieldsDef:Get(cSourceField))
            loop
        endif
        nSourceFieldAT:=aScan(aSourceFieldsDef,{|x|(x[1]==cSourceField)})
        cType:=aSourceFieldsDef[nSourceFieldAT][2]
        if (cType=="char")
            xValue:=""
        endif
        aValueField[nSourceField][1]:=NormalizeData(aLine[nSourceFieldAT],cType)
        aValueField[nSourceField][2]:=cType
    next nSourceField

    FwFreeArray(@aSourceField)

    oHMaSourceFieldsDef:Clean()
    oHMaSourceFieldsDef:=FreeObj(oHMaSourceFieldsDef)

    for nSourceField:=1 to nSourceFields
        if (aValueField[nSourceField][2]=="char")
            xValue+=aValueField[nSourceField][1]
        else
            xValue:=aValueField[nSourceField][1]
        endif
    next nSourceField

    FWFreeArray(@aValueField)

    if (!st_oHMbTransform:Get(cTargetField,@bTransform))
        cTransform:=allTrim(oTFIni:GetPropertyValue(cTargetField,"Transform",""))
        if (cTransform=="FindInTable")
            cTransform:=allTrim(oTFIni:GetPropertyValue(cTargetField,cTransform,""))
            bTransform:=&(cTransform)
        elseif (!empty(cTransform))
            bTransform:=&(cTransform)
        endif
        st_oHMbTransform:Set(cTargetField,bTransform)
    endif

    if (valtype(bTransform)=="B")
        xValue:=Eval(bTransform,xValue,oTFIni)
    endif

return(xValue)

static function NormalizeData(xValue as variant,cType as character) as variant

    if (cType=="char")
       xValue:=strTran(xValue,'"',"")
    elseif (cType=="inte")
        xValue:=Int(val(xValue))
    elseif ("deci"$cType)
        if (","$xValue)
            xValue:=strTran(xValue,",",".")
        endif
        xValue:=val(xValue)
    elseif (cType=="date")
        xValue:=CToD(xValue)
    elseif (cType=="logi")
        xValue:=(Left(lower(xValue),1)$"sty1")
    endif

return(xValue)

static function FindInTable(oTFIni as object,cTable as character,xValue as variant,lTableInFile as logical)

    local cType as character

    local cINIfile as character
    local cRootPath as character

    local oTFIniTable as object

    local xTmp as variant

    cType:=valType(xValue)
    if (cType=="N")
        xValue:=ctools():NToS(xValue)
    elseif (cType!="C")
        xValue:=cValToChar(xValue)
    endif

    if (oTFIni:ExistSection(cTable))
        if (oTFIni:GetATProperty(cTable,"FindInTableFile")>0)
            dfv():Default(@lTableInFile,.F.)
            if (lTableInFile)
                oTFIniTable:=cacheData():Get("datasul2totvs",cTable,nil)
                if (oTFIniTable==nil)
                    cRootPath:=cacheData():Get("datasul2totvs","cRootPath")
                    cINIfile:=cRootPath
                    cINIfile+=oTFIni:GetPropertyValue(cTable,"FindInTableFile","")
                    oTFIniTable:=TFIni():New(cINIfile,";")
                    cacheData():Set("datasul2totvs",cTable,oTFIniTable)
                endif
                xTmp:=oTFIniTable:GetPropertyValue(cTable,xValue,"")
                if ((empty(xTmp)).and.((oTFIniTable:GetATProperty(cTable,"__DFV__")>0)))
                    xTmp:=oTFIniTable:GetPropertyValue(cTable,"__DFV__","")
                endif
                xValue:=xTmp
            else
                cRootPath:=cacheData():Get("datasul2totvs","cRootPath")
                cINIfile:=cRootPath
                cINIfile+=oTFIni:GetPropertyValue(cTable,"FindInTableFile","")
                oTFIniTable:=TFIni():New(cINIfile,";")
                xValue:=FindInTable(oTFIniTable,cTable,xValue)
            endif
        elseif ((oTFIni:GetATProperty(cTable,xValue)>0))
            xValue:=oTFIni:GetPropertyValue(cTable,xValue,"")
        elseif ((oTFIni:GetATProperty(cTable,"__DFV__")>0))
            xValue:=oTFIni:GetPropertyValue(cTable,"__DFV__","")
        endif
    endif

return(xValue)

static function getR8Seq() as character

    static c_stHMSR8SeqKey as character

    local cStack:="DATASUL2TOTVS.IMPORTSR8" as character

    local cR8MAT as character
    local cR8SEQ:="" as character
    local cR8TIPO as character
    local cR8FILIAL as character
    local cR8DATAINI as character
    local cR8TIPOAFA as character

    local cHMSR8SeqKey:="" as character

    local cTmpAlias as character

    local dR8DATAINI as date

    begin sequence

        if (type("cPVTSR8Alias")!="C")
            _SetNamedPRVT("cPVTSR8Alias",cacheData():Get("datasul2totvs","importSR8Alias","__NOALIAS__"),cStack)
        endif

        cTmpAlias:=cPVTSR8Alias
        if (select(cTmpAlias)==0)
            break
        endif

        cR8FILIAL:=(cTmpAlias)->R8_FILIAL
        cR8MAT:=(cTmpAlias)->R8_MAT
        dR8DATAINI:=(cTmpAlias)->R8_DATAINI
        cR8TIPO:=(cTmpAlias)->R8_TIPO
        cR8TIPOAFA:=(cTmpAlias)->R8_TIPOAFA

        cR8DATAINI:=DToS(dR8DATAINI)

        cHMSR8SeqKey:=&("cEmpAnt")
        cHMSR8SeqKey+=cR8FILIAL
        cHMSR8SeqKey+=cR8MAT

        if (type("oPVTHMSR8Seq")!="O")
            _SetNamedPRVT("oPVTHMSR8Seq",THashMap():New(),cStack)
        else
            if (c_stHMSR8SeqKey!=cHMSR8SeqKey)
                c_stHMSR8SeqKey:=cHMSR8SeqKey
                oPVTHMSR8Seq:Clean()
            endif
        endif

        cHMSR8SeqKey+=cR8DATAINI
        cHMSR8SeqKey+=cR8TIPO
        cHMSR8SeqKey+=cR8TIPOAFA

        if (!oPVTHMSR8Seq:Get(cHMSR8SeqKey,@cR8SEQ)).or.(Empty(cR8SEQ))
            if (type("nPVTSR8Seq")!="N")
                _SetNamedPRVT("nPVTSR8Seq",GetSx3Cache("R8_SEQ","X3_TAMANHO"),cStack)
                cR8SEQ:=Replicate("0",nPVTSR8Seq)
                _SetNamedPRVT("cPVTR8SEQ",cR8SEQ,cStack)
            endif
            cR8SEQ:=cPVTR8SEQ
        endif

        cR8SEQ:=__Soma1(cR8SEQ)

        oPVTHMSR8Seq:Set(cHMSR8SeqKey,cR8SEQ)

    end sequence        

return(cR8SEQ)

static function ProcRedefine(oProcess as object,oFont as object,nLeft as numeric,nWidth as numeric,nCTLFLeft as numeric,lODlgF as logical,lODlgW as logical) as logical
    local lProcRedefine as logical
    lProcRedefine:=MsProcess():ProcRedefine(@oProcess,@oFont,@nLeft,@nWidth,@nCTLFLeft,@lODlgF,@lODlgW)
    return(lProcRedefine)
