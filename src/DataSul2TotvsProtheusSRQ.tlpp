#include "totvs.ch"

#include "execin.th"
EXECIN CLASS SRQImport

static function SRQGetValue(xGet as variant,xDefault as variant) as variant
return(cacheData():Get("datasul2totvsprotheus",xGet,xDefault))

static function SRQSetValue(xVar as variant,xValue as variant) as variant
return(cacheData():Set("datasul2totvsprotheus",xVar,xValue))

static function SRQImportData(oMsNewProcess as object,lEnd as logical,lPercentage as logical) as logical

    local aAddIndex as array

    local bSourceSetFilter as codeblock

    local cAlias:="SRQ" as character
    local cIndexKey as character
    local cTableImport:="SRQ" as character

    local cTmpAlias as character

    local cPreLoadAlias as character
    local cPreLoadTableImport as character
    local cPreLoadIndexKey as character
    local aPreLoadAddIndex as array

    local lSRQImport as logical
    local lPreLoadTable as logical

    local oTFIni:=cacheData():Get("datasul2totvsprotheus","readIniFile") as object
    local oTLogReport:=tLogReport():New() as object
    local oFWTemporaryTable as object

    oTFIni:SetPropertyValue(cTableImport,"TCSQLUpdateTable","0")
    
    cPreLoadAlias:=allTrim(oTFIni:GetPropertyValue(cTableImport,"preLoadAlias",""))
    cPreLoadTableImport:=allTrim(oTFIni:GetPropertyValue(cTableImport,"preLoadTableImport",""))
    cPreLoadIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"preLoadIndexKey",""))
    aPreLoadAddIndex:=strToKArr2(allTrim(oTFIni:GetPropertyValue(cTableImport,"preLoadAddIndex","")),",",.T.)

    lPreLoadTable:=(!empty(cPreLoadAlias))
    lPreLoadTable:=((lPreLoadTable).and.(!empty(cPreLoadTableImport)))
    lPreLoadTable:=((lPreLoadTable).and.(!empty(cPreLoadIndexKey)))
    lPreLoadTable:=((lPreLoadTable).and.(!empty(aPreLoadAddIndex)))

    if (lPreLoadTable)
        lPreLoadTable:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cPreLoadAlias,@cPreLoadIndexKey,@cPreLoadTableImport,@aPreLoadAddIndex,@lPreLoadTable)
    endif

    cIndexKey:=allTrim(oTFIni:GetPropertyValue(cTableImport,"IndexKey","RQ_FILIAL+RQ_MAT+RQ_ORQEM+RQ_SEQUENC"))
    aAddIndex:=strToKArr2(allTrim(oTFIni:GetPropertyValue(cTableImport,"AddIndex","RQ_FILIAL,RQ_MAT,RQ_ORQEM,RQ_SEQUENC")),",",.T.)

    cacheData():Set("datasul2totvsprotheus","SRQImportDataLogReport",oTLogReport)

    bSourceSetFilter:={|cLine|SRQSourceFilter(cLine,oTFIni)}
    cacheData():Set("datasul2totvsprotheus",cTableImport+"SourceSetFilter",bSourceSetFilter)

    lSRQImport:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.ImportData",@oMsNewProcess,@lEnd,lPercentage,@oTLogReport,@cAlias,@cIndexKey,@cTableImport,@aAddIndex)

    if (lPreLoadTable)
        cTmpAlias:=cacheData():Get("datasul2totvsprotheus","import"+cPreLoadTableImport+"Alias")
        if (select(cTmpAlias)>0)
            (cTmpAlias)->(dbCloseArea())
        endif
        oFWTemporaryTable:=cacheData():Get("datasul2totvsprotheus","import"+cPreLoadTableImport+"FWTemporaryTable")
        if (valType(oFWTemporaryTable)=="O")
            oFWTemporaryTable:Delete()
            oFWTemporaryTable:=FreeObj(oFWTemporaryTable)
        endif
    endif

    if (lSRQImport)
        ApMsgInfo(cAlias+" Table Import Completed","Info")
    else
        ApMsgInfo("Problems were encountered while processing the "+cTableImport+" table","Info")
    endif

    oTLogReport:PrintDialog("Log de Ocorrencias na Importacao: ["+cAlias+"]"+Upper(FWSX2Util():GetX2Name(cAlias,.F.)))
    MsAguarde({||oTLogReport:FreeObj()},"Releasing temporary files and workspace memory...","Wait...")
    oTLogReport:=FreeObj(oTLogReport)

    FWFreeArray(@aAddIndex)

    if (type("oPVTHMFindSRVPD")=="O")
        oPVTHMFindSRVPD:Clean()
        oPVTHMFindSRVPD:=FreeObj(oPVTHMFindSRVPD)
    endif

    DelClassIntF()

return(lSRQImport)

static function SRQFindSRVPD(cRQPD as character) as logical

    static c_stHMFindSRVPDKey as character

    local cStack:="SRQIMPORTDATA"
    
    local cSRVFilial as character
    local cSRVKeySeek as character

    local cHMFindSRVPDKey as character

    local lSRVFound as logical

    local nSRVOrder as numeric
    local nSRVRecNo as numeric

    cSRVFilial:=fFilFunc("SRV")
    
    cSRVKeySeek:=cSRVFilial
    cSRVKeySeek+=cRQPD

    cHMFindSRVPDKey:=&("cEmpAnt")
    cHMFindSRVPDKey+=cSRVFilial

    if (type("oPVTHMFindSRVPD")!="O")
        _SetNamedPRVT("oPVTHMFindSRVPD",THashMap():New(),cStack)
    endif

    if (c_stHMFindSRVPDKey!=cHMFindSRVPDKey)
        c_stHMFindSRVPDKey:=cHMFindSRVPDKey
        oPVTHMFindSRVPD:Clean()
    endif

    if (!oPVTHMFindSRVPD:Get(cSRVKeySeek,@nSRVRecNo))
        nSRVOrder:=RetOrder("SRV","RV_FILIAL+RV_COD")
        SRV->(dbSetOrder(nSRVOrder))
        lSRVFound:=SRV->(MsSeek(cSRVKeySeek,.F.))
        if (lSRVFound)
            nSRVRecNo:=SRV->(RecNo())
        else
            nSRVRecNo:=0
        endif
        oPVTHMFindSRVPD:Set(cSRVKeySeek,nSRVRecNo)
    else
        lSRVFound:=(nSRVRecNo>0)
        if (lSRVFound)
            SRV->(MsGoTo(nSRVRecNo))
        else
            PutfileInEof("SRV")
        endif
    endif

return(lSRVFound)

static function SRQGetSRVPD(cEventoDataSul as character,oTFIni as object) as character

    local cRQPD as character
    local cFindInTable as character

    local cTReportGrp as character
    local cTReportMsg as character

    local lSRVFound as logical

    local nSRVCod:=getSX3Cache("RV_COD","X3_TAMANHO") as numeric

    local oTLogReport as object 

    cFindInTable:=datasul2totvs.findInTable(oTFIni,"TabelaVerbasSRV",cEventoDataSul,.T.,.T.)
    
    cRQPD:=Left(cFindInTable,nSRVCod)

    if (!Empty(cRQPD))

        lSRVFound:=SRQFindSRVPD(cRQPD)

        if (!lSRVFound)
            oTLogReport:=SRQGetValue("SRQImportDataLogReport",nil)
            if (valType(oTLogReport)=="O")
                cTReportGrp:=cTools():Accentuation("[Verba N#1o Localizada na tabela SRV]:","atilde")
                cTReportMsg:="Verba ["+cRQPD+"]. Evento ["+cFindInTable+"]."
                oTLogReport:AddGroup(cTReportGrp)
                if (oTLogReport:FindDetail(cTReportGrp,cTReportMsg)==0)
                    oTLogReport:AddDetail(cTReportGrp,cTReportMsg)
                endif
            endif
            cRQPD:=Space(nSRVCod)
        endif
    
    elseif (!empty(cEventoDataSul))

        oTLogReport:=SRQGetValue("SRQImportDataLogReport",nil)
        if (valType(oTLogReport)=="O")
            cTReportGrp:=cTools():Accentuation("[De/Para N#1o Localizado]:","atilde")
            cTReportMsg:=cTools():Accentuation("N#1o Existe paridade de Verba Protheus para o Evento Datasul [","atilde")
            cTReportMsg+=if(Empty(cFindInTable),cEventoDataSul,cFindInTable)+"]."
            oTLogReport:AddGroup(cTReportGrp)
            if (oTLogReport:FindDetail(cTReportGrp,cTReportMsg)==0)
               oTLogReport:AddDetail(cTReportGrp,cTReportMsg)
            endif
        endif

    endif

return(cRQPD)

static function SRQGetRQVerbas(cVarPD as character) as character
    local aPDS as array
    local aVarPD as array
    local cPD as character
    local cRQVerbas:="" as character
    local nPD as numeric
    local nPDs as numeric
    local nVar as numeric
    local nVars as numeric
    aVarPD:=StrTokArr2(cVarPD,",",.T.)
    nVars:=Len(aVarPD)
    for nVar:=1 to nVars
        cPD:=allTrim(SRQGetValue(aVarPD[nVar],""))
        aPDS:=StrTokArr2(cPD,",",.T.)
        nPDs:=Len(aPDS)
        for nPD:=1 to nPDs
            cPD:=aPDS[nPD]
            if (!Empty(cPD)).and.(!(cPD$cRQVerbas))
                cRQVerbas+=cPD+","
            endif
        next nPD
        FWFreeArray(@aPDS)
        SRQSetValue(aVarPD[nVar],"")
    next nVar
    FWFreeArray(@aVarPD)
return(cRQVerbas)

static function SRQSourceFilter(cLine as character,oTFIni as object) as logical

    local aLine as array

    local nAT as numeric

    local lFilter:=.T. as logical

    local xFilter as variant

    begin sequence
        if (empty(cLine))
            break
        endif
        cLine:=subStr(cLine,1,15)
        nAT:=RAT(";",cLine)
        if (nAT>0)
            cLine:=substr(cLine,1,(nAT-1))
        endif
        aLine:=strToKArr2(cLine,";",.T.)
        if (empty(aLine).or.(Len(aLine)<2))
            break
        endif
        xFilter:=strTran(aLine[1],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaEmpresas",xFilter,.T.,.T.)
        lFilter:=(xFilter==cEmpAnt)
        if (!lFilter)
            break
        endif
        xFilter:=aLine[2]
        xFilter:=strTran(aLine[2],'"',"")
        xFilter:=datasul2totvs.datasul2totvs():Execute("datasul2totvs.FindInTable",oTFIni,"TabelaFiliais",xFilter,.T.,.T.)
        lFilter:=(!empty(xFilter))
        if (!lFilter)
            break
        endif
    end sequence

    FWFreeArray(@aLine)

return(lFilter)
